# [PackageDev] target_format: plist, ext: tmLanguage
name: ABC Notation
scopeName: source.abc
fileTypes: [abc]
uuid: 431a5f26-5897-4146-8415-25a3c4b859c0

patterns:
- include: '#unparsed'
- include: '#escape'

- comment: Bar lines
  name: keyword.operator.barline.abc
  match: '((?:\.?\|\|?|:*\|\]|\[\|:*|::|:+\||\|:+|\.?\||\[\|\])[1-9]?|(?::*\|[1-9](?:[-,][1-9])*))'

- comment: Header lines
  name: entity.name.function.abc
  match: ^[A-Za-z]:([^%\\]*)
  captures:
    '1': {name: string.unquoted.abc}

- comment: Inline Fields
  match: (\[[a-zA-Z&&[^IKXr]]:)(.*?)(\])
  captures:
    '1': {name: entity.name.function.inline-field.abc}
    '2': {name: string.unquoted.inline-field.abc}
    '3': {name: entity.name.function.inline-field.abc}

- comment: Notes
  match: ([_\^]{2}|=|[_=\^](?:\d*/*(?:\d*)?)|(?:\d(?!\.))+)?([A-Ga-g][,']*)((?:\d*/*(?:\d*)?)|(?:\d*>*(?:\d*)?)|(?:\d*<*(?:\d*)?)|(?:\d(?!\.))+)
  captures:
    '1': {name: constant.language.accidental.abc}
    '2': {name: constant.character.note.abc}
    '3': {name: constant.numeric.note-length.abc}

- comment: Chord symbols and string annotations
  name: meta.code.string.chord.abc
  match: '(\")(.*)(\")'
  captures:
    '1': {name: punctuation.definition.string.begin.abc}
    '2': {name: string.quoted.double.chord.abc}
    '3': {name: punctuation.definition.string.end.abc}

- comment: Slurs
  name: meta.code.slur.abc
  begin: (\((?![\d!:]))
  beginCaptures:
    '1': {name: support.type.slur.abc}
  end: (\)(?!!))
  endCaptures:
    '1': {name: support.type.slur.abc}
  patterns:
  - include: $self
  - include: '#abc-code'

- comment: Chords
  name: meta.code.chord.abc
  begin: (\[(?!(?:[|:\d])|(?:[A-Za-z]:)))
  beginCaptures:
    '1': {name: support.type.chord.abc}
  end: (\](?![|:\d]))

- comment: Decorations
  name: meta.code.decoration.abc
  match: '(!)([[:alpha:]&&[^\s!]]*)(!)'
  captures:
    '1': {name: keyword.operator.decoration.abc}
    '2': {name: entity.name.trait.decoration.abc}
    '3': {name: keyword.operator.decoration.abc}

- comment: Line Break
  name: support.constant.line-break.abc
  match: (\$(?= ) +)

- comment: Line Continue
  name: support.constant.line-continue.abc
  match: (\/(?= ) +)

- include: '#namespace'

- include: '#directive'

- include: '#comments'


# TODO:
# corrections to inline fields
# note lengths
# corrections to barlines
# rests
# tuplets
# slurs
# chords
# corrections to string annotations/chord symbols

repository:
  # Unparsed text matches for all text outside of an ABC tune or multi-line
  # block of embedded markup or code content.
  unparsed:
    name: meta.free-text.abc
    begin: '^([^\s].*)'
    beginCaptures:
      '1': {name: comment.block.free-text.abc}
    end: ^\s*$
  escape:
    name: constant.character.escape.abc
    match: (?:\\%)|(?:\\\\)|(?:\\u\h{4})|(?:\\[[:punct:]&&[\w]&&[^\s]]{2})|(?:&\w+;)|(?:&#\d+;)|(?:&#x\h+;)
  namespace:
    comment: Namespace
    name: meta.namespace.abc
    match: '(%)(abc(?:-\d\.\d)?)'
    captures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: entity.name.namespace.abc}
  directive:
    comment: Directives
    name: meta.directive.abc
    match: '(%%)\s*(\w*)\b([^%\n\r]*)'
    captures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
      '3': {name: variable.parameter.directive.abc}
  comments:
    comment: Comments
    name: comment.line.percentage.abc
    match: '%(?!%|abc).*'
  note-length:
    comment: Note lengths
    name: constant.numeric.note-length.abc
    match: ((?:\d*/*(?:\d*)?)|(?:\d*>*(?:\d*)?)|(?:\d*<*(?:\d*)?)|(?:\d(?!\.))+)
  spacing-length:
    name: constant.numeric.float.spacing-length.abc
    match: (\d*(?:\.\d*)?(?:pt|in|cm)?\b)

  svg-directive:
    name: meta.svg.directive.abc
    contentName: source.xml
    begin: (%%)\s*(beginsvg)
    beginCaptures:
      '1': {name: punctuation.definition.comment.pseudo.abc}
      '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
    end: (%%)\s*(endsvg)
    endCaptures:
      '1': {name: punctuation.definition.comment.pseudo.abc}
      '2': {name: variable.function.abc punctuation.definition.sequence.end.abc}
    patterns:
    - include: '#_escape'
    - include: '#abc-comment'
    - include: '#_directive'

  svg-instruction:
    name: meta.svg.instruction.abc
    contentName: source.xml
    begin: (^I:)\s*(beginsvg)
    beginCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
    end: (^I:)\s*(endsvg)
    endCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
    patterns:
    - include: '#comment'
    - include: '#directive'

  text-directive:
    name: meta.text.directive.abc
    contentName: string.unquoted.free.abc
    begin: ^(%%)\s*(begintext)\b\s+((?:obeylines|fill|ragged|justify|align|skip)\b)?
    beginCaptures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
      '3': {name: support.type.directive.abc}
    end: ^(%%)\s*(endtext)\s*\n
    endCaptures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
    patterns:
    - include: '#comment'
    - include: '#directive'

  text-instruction:
    name: meta.text.instruction.abc
    contentName: string.unquoted.free.abc
    begin: ^(I:)\s*(begintext)\b\s+((?:obeylines|fill|ragged|justify|align|skip)\b)?
    beginCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: support.function.directive.abc}
      '3': {name: support.type.directive.abc}
    end: ^(I:)\s*(endtext)\s*\n
    endCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: support.function.directive.abc}
    patterns:
    - include: '#comment'
    - include: '#directive'
