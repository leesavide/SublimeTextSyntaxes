# [PackageDev] target_format: plist, ext: tmLanguage
# first_line_match: ^%abc(?:-\d\.\d)?
name: ABC Notation
scopeName: source.abc
fileTypes: [abc, abh, abp]
foldingStartMarker: '^X:\s*\d+'
foldingStopMarker: '^\s*$'
uuid: 431a5f26-5897-4146-8415-25a3c4b859c0
patterns:
  # abc tunes
  match: '^(X:)\s*(\d+)'
  captures:
    '1': {name: entity.name.tag.index.abc}
    '2': {name: variable.parameter.index.abc} # meta.toc-list.index.abc
  patterns:
    - include: '#abc-tune'

repository:
  # global inclusions
  prototype:
    patterns:
      # comments, directives, namespace comments, remark fields
      - include: '#comments'
      # escape characters
      - include: '#escape'

  # abc tunes
  abc-tune:
    name: meta.tune.abc
    begin: '^(T:)'
    beginCaptures:
      '1': {name: entity.name.tag.title.abc}
    contentName: meta.field.title.abc
    end: $
    patterns:
      - include: '#prototype'
      # tune-body
      - match: '^(K:)\s*([^\r\n]+)?'
        captures:
          '1': {name: entity.name.tag.key.abc}
          '2': {name: string.unquoted.key.abc}
        end: '^(\s*)?$'
        # TODO: Capture clef variable keywords within key field
        patterns:
          - include: '#prototype'
          - include: '#abc-chord'
          - include: '#abc-note'
          - include: '#abc-rest'
          - include: '#abc-space'
          - include: '#grace'
          - include: '#decoration'
          - include: '#macro'
          - include: '#strings'
          - include: '#operators'
          - include: '#barline'
          - include: '#inline-field'

  # escapes, HTML entities, literals
  escape:
    patterns:
      - name: constant.character.escape.abc
        match: (\\.)
      - name: constant.character.escape.abc
        match: (\\\\)
      - name: constant.character.escape.abc
        match: (\\u\h{4})
      - name: constant.character.escape.abc
        match: (?:\\[[:punct:]&&[\w]&&[^[ \t\v\f]]]{2})
      - name: constant.character.escape.abc
        match: '(?:&\w+;)'
      - name: constant.character.escape.abc
        match: '(?:&#\d+;)'
      - name: constant.character.escape.abc
        match: '(?:&#x\h+;)'
      - name: constant.character.escape.abc
        match: (\\%)

  # comments, namespace comments, directives, remark fields
  comments:
    patterns:
      - name: meta.comment.abc
        begin: '(?:^\s*)?(?>%(?!%|abc))'
        beginCaptures:
          '1': {name: punctuation.definition.comment.abc}
        contentName: comment.line.percentage.abc
        end: $
        patterns:
          - include: '#prototype'
      # directive/pseudo-comment
      - name: meta.directive.abc comment.line.percentage.directive.abc
        begin: '(?>%%)\s*(\w*)\b'
        # '\b' is crucial here!
        beginCaptures:
          '1': {name: punctuation.definition.comment.abc}
          '2': {name: keyword.operator.word.directive.abc}
        contentName: variable.parameter.directive.abc
        end: $
        patterns:
          - include: '#prototype'
          - match: '(?i)\b(true|false|yes|no|on|off)\b'
            name: storage.type.directive.abc
            patterns:
              - match: '(\d*(?:\.\d*)?(?:pt|in|cm)?)'
                name: constant.numeric.float.length-unit.abc
              - match: '(?i)\b(true|false|yes|no|on|off)\b'
                name: storage.type.directive.boolean.abc
              # TODO: include more keywords to be highlighted in directive parameters
      # namespace comment
      - match: '(?:^\s*)?(?>(%)(abc(?:-\d\.\d)?))'
        name: comment.line.namespace.abc
        captures:
          '1': {name: punctuation.definition.comment.abc}
          '2': {name: keyword.other.special-method.namespace.abc}
        patterns:
          - include: '#prototype'
      # remark field
      - name: meta.field.remark.abc
        begin: '^(r:)'
        beginCaptures:
          '1': {name: support.function.field.remark.abc}
        contentName: comment.line.remark.abc
        end: $
        patterns:
          - include: '#prototype'

  fields:
    patterns:
      # info fields
      - name: meta.field.abc
        begin: '^([[:alpha:]+&&[^IKPVTXr]]:)'
        beginCaptures:
          '1': {name: support.function.field.abc}
        contentName: string.unquoted.field.abc
        end: $
        patterns:
          - include: '#prototype'
      # instruction field
      - name: meta.instruction.abc
        begin: '^(I:)\s*(\w+)\s+'
        beginCaptures:
          '1': {name: entity.name.tag.instruction.abc}
          '2': {name: keyword.operator.word.directive.abc}
        contentName: variable.parameter.directive.abc
        patterns:
          - include: '#prototype'
          - match: '(?i)\b(true|false|yes|no|on|off)\b'
            name: storage.type.directive.abc
      # voice field
      - name: meta.field.voice.abc
        begin: '^(V:)'
        beginCaptures:
          '1': {name: entity.name.tag.voice.abc}
        contentName: variable.parameter.voice.abc # meta.toc-list.voice.abc
        end: $
        patterns:
          - include: '#prototype'
      # part field
      - name: meta.field.part.abc
        begin: '^(P:)'
        beginCaptures:
          '1': {name: entity.name.tag.part.abc}
        contentName: variable.parameter.part.abc # meta.toc-list.part.abc
        end: $
        patterns:
          - include: '#prototype'

  abc-note:
    match: |-
      (?x)
        ([_=\^](?:\d*\/*\d*)|=|[_\^]{2})?
        ([A-Ga-g][,']*)
        (\d*[<>/]*\d*)?
    captures:
      '1': {name: constant.language.accidental.abc}
      '2': {name: constant.character.note.abc}
      '3': {name: storage.type.note-length.abc} # constant.numeric.note-length.abc
    patterns:
      - include: '#prototype'

  abc-rest:
    patterns:
      - name: meta.code.abc-rest.abc
        match: '([XZ])(\d+)?'
        captures:
          '1': {name: storage.type.abc-rest.abc}
          '2': {name: storage.type.rest-length.abc} # constant.numeric.rest-length.abc
        patterns:
          - include: '#prototype'
      - name: meta.code.abc-rest.abc
        match: |-
          (?x)
            ([xz])
            ((?:\d*\/*(?:\d*)?)|
             (?:\d*>*(?:\d*)?)|
             (?:\d*<*(?:\d*)?))?
        captures:
          '1': {name: storage.type.abc-rest.abc}
          '2': {name: storage.type.rest-length.abc} # constant.numeric.rest-length.abc
        patterns:
          - include: '#prototype'

  abc-space:
    name: meta.code.abc-space.abc
    match: |-
      (?x)
        ([yY])
        (\d+(?:\.\d*(?:pt|in|cm)?)?)?
    captures:
      '1': {name: storage.type.spacer.abc}
      '2': {name: constant.numeric.space-length.abc}
    patterns:
      - include: '#prototype'

  decoration:
    patterns:
      - name: variable.language.decoration.abc
        match: '(?:^\s*)?([-\.HLMOPSTuv](?!:))'
        patterns:
          - include: '#prototype'
      - name: variable.language.decoration.abc
        match: '(!\w+!)'
        patterns:
          - include: '#prototype'
      - name: variable.language.decoration.abc
        match: |-
          (?x)
            (\!(?:
                \+|\-\(|\-\)|\/{1,3}|[0-5]|\<\(|\<\)|\<|\>\(|\>\)|\>|\^|
                accent|arpeggio|beam-accel|beam-rall|beambr[12]|beamon|
                breath|coda|courtesy|crescendo|crescendo\(|crescendo\)|
                D\.C\.(?:alcoda|alfine)?|D\.S\.(?:alcoda|alfine)?|
                dacapo|dacoda|diminuendo|diminuendo\(|diminuendo\)|
                dot|downbow|editorial|emphasis|f+|fermata|fine|gmark|
                invertedfermata|invertedturn|invertedturnx|invisible|
                longphrase|lowermordent|marcato|mediumphrase|mf|mordent|
                mp|open|p+|plus|pralltriller|rbend|rbstop|roll|segno|sfz|
                shortphrase|slide|snap|stemless|tenuto|thumb|
                trem[1-4]|trill|trill\(|trill\)|turn|turnx|upbow|uppermordent|wedge|
                xstem|\~\(|\~\))\!)
        patterns:
          - include: '#prototype'
      # excludes matching '~' from macros in tune
      - name: variable.language.decoration.abc
        match: (~(?![h-wH-W][a-zA-Z0-9]*))
        patterns:
          - include: '#prototype'
      - name: support.type.decoration.slur.abc # storage.modifier.decoration.slur.abc
        match: ((?:\((?![\d:])[',]?)|\))
        patterns:
          - include: '#prototype'

  barline:
    patterns:
      - name: meta.barline.abc
        match: ([ \|\]]\])
        captures:
          '1': {name: punctuation.separator.barline.abc}
        patterns:
          - include: '#prototype'
      - name: comment.block.documentation.abc
        match: '(\[\|\]|\[\])'
        patterns:
          - include: '#prototype'
      - name: meta.barline.abc
        match: ((?>\[\|:*))
        captures:
          '1': {name: punctuation.separator.barline.abc}
        patterns:
          - include: '#prototype'
      - name: meta.barline.abc
        match: |-
          (?x)
            ((?>
              (?:[\[\|\]][\[\|\]](?=:):)|
              (?:\[+:+)|
              (?::+\[+)|
              (?::+\]*)|
              (?:\]+:+)|
              (?::+\]+)|
              (?:[|]*\]{2}:*)|
              (?:(?=\|)\|[\[\]])|
              (?:[:|]*\|[:|]*)|
              (?:[:|]+\[{1,2})))
            (\d+(?:[,-]\d+)*)?
        captures:
          '1': {name: punctuation.separator.barline.abc}
          '2': {name: punctuation.separator.barline.repeat-length.abc} # support.type.barline.abc
        patterns:
          - include: '#prototype'
      - name: meta.code.barline.abc
        match: '(:*[\|\[\]])(\d(?:[,-]\d)*)+'
        captures:
          '1': {name: punctuation.separator.barline.abc}
          '2': {name: punctuation.separator.barline.repeat-length.abc} # support.type.barline.abc
        patterns:
          - include: '#prototype'

  macro:
    match: '(\~[h-zH-Z][a-zA-Z0-9]{,30})'
    name: support.type.macro.abc
    patterns:
      - include: '#prototype'

  grace:
    name: meta.code.grace.abc
    begin: '(\{/?)'
    beginCaptures:
      '1': {name: support.type.grace.abc}
    end: '(\})'
    endCaptures:
      '1': {name: support.type.grace.abc}
    patterns:
      - include: '#prototype'
      - match: ([A-Ga-g][,']*)
        name: constant.character.note.abc
      - match: (\d*[<>/]*\d*)?
        name: constant.numeric.note-length.abc # storage.type.note-length.abc
      - include: '#abc-rest'
      - include: '#decoration'

  # operators
  operators:
    patterns:
      - match: '(\(\d+(?::\d*(?::\d*)?)?)'
        name: support.type.tuplet.abc
        patterns:
          - include: '#prototype'
      - match: '\`'
        name: support.constant.backquote.abc
        patterns:
          - include: '#prototype'
      - match: '(\(\&|\&\&?|\&\))'
        name: support.function.overlay.abc
        patterns:
          - include: '#prototype'
      - match: '(\$(?= *| *$))'
        name: support.constant.line-break.abc
        patterns:
          - include: '#prototype'
      - match: '(\\(?= *| *$))'
        name: support.constant.line-continue.abc
        patterns:
          - include: '#prototype'
  # chords
  abc-chord:
    name: meta.chord.abc
    begin: '(\[(?![:|\[\]\d]|(?:[a-zA-Z]:)))'
    beginCaptures:
      '1': {name: support.type.decoration.chord.abc} # meta.brace.square.chord.abc
    end: '(\](?<![:|]))'
    endCaptures:
      '1': {name: support.type.decoration.chord.abc} # storage.modifier.decoration.chord.abc
    patterns:
      - include: '#prototype'
      - include: '#abc-note'
      - include: '#abc-rest'
      - include: '#abc-space'
      - include: '#decoration'
      - include: '#macro'
      - include: '#operators'

  # chord symbols, annotations
  strings:
    patterns:
      - name: meta.string.chord.abc
        begin: '("(?![_<>^@]))'
        beginCaptures:
          '1': {name: punctuation.definition.string.chord.begin.abc}
        contentName: string.quoted.double.chord.abc
        end: '(")'
        endCaptures:
          '1': {name: punctuation.definition.string.chord.end.abc}
        patterns:
          - include: '#prototype'
          # TODO: Match for symbols in chord strings
      - name: meta.string.annotation.abc
        begin: '(\"[_<>^]|\"@(?:\d+(?:\.\d*)?),(?:\d+(?:\.\d*)?))'
        beginCaptures:
          '1': {name: punctuation.definition.string.annotation.begin.abc}
        contentName: string.quoted.double.annotation.abc
        end: '(")'
        endCaptures:
          '1': {name: punctuation.definition.string.annotation.end.abc}
        patterns:
          - include: '#prototype'

  # inline fields
  inline-field:
    patterns:
      - comment: General Inline Field
        name: meta.inline-field.abc
        begin: (\[[[:alpha:]&&[^IKPVXr]]:)
        beginCaptures:
          '1': {name: support.function.inline-field.abc}
        contentName: string.unquoted.inline-field.abc
        end: (\])
        endCaptures:
          '1': {name: support.function.inline-field.abc}
        patterns:
          - include: '#prototype'
      - comment: Inline Remark
        name: meta.inline-field.remark.abc
        begin: (\[r:)
        beginCaptures:
          '1': {name: support.function.inline-field.remark.abc}
        contentName: comment.block.remark.abc
        end: (\])
        endCaptures:
          '1': {name: support.function.inline-field.remark.abc}
        patterns:
          - include: '#prototype'
      - comment: Inline Instruction
        name: meta.inline-field.instruction.abc
        begin: (\[I:)\s*(\w+)
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.instruction.abc}
          '2': {name: keyword.operator.word.instruction.abc}
        contentName: variable.parameter.instruction.abc
        end: (\])
        endCaptures:
          '1': {name: entity.name.tag.inline-field.instruction.abc}
        patterns:
          - include: '#prototype'
          - name: constant.numeric.float.length-unit.abc
            match: '(\d*(?:\.\d*)?(?:pt|in|cm)?)'
          # TODO: Add more matches for directive keywords
      - comment: Inline Title
        name: meta.inline-field.title.abc
        begin: (\[T:)
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.title.abc}
        contentName: string.unquoted.title.abc # meta.toc-list.title.abc
        end: (\])
        endCaptures:
          '1': {name: entity.name.tag.inline-field.title.abc}
        patterns:
          - include: '#prototype'
      - comment: Inline Voice
        name: meta.inline-field.voice.abc
        begin: (\[V:)
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.voice.abc}
        contentName: variable.parameter.voice.abc # meta.toc-list.voice.abc
        end: (\])
        endCaptures:
          '1': {name: entity.name.tag.inline-field.voice.abc}
        patterns:
          - include: '#prototype'
        # TODO: add keyword for voice's transposition parameters
      - comment: Inline Part
        name: meta.inline-field.part.abc
        begin: (\[P:)
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.part.abc}
        contentName: variable.parameter.part.abc # meta.toc-list.part.abc
        end: (\])
        endCaptures:
          '1': {name: entity.name.tag.inline-field.part.abc}
        patterns:
          - include: '#prototype'

  # accidental:
  #   - match: ([_=\^](?:\d*\/*\d*)|=|[_\^]{2})
  #     name: constant.language.accidental.abc

  # note:
  #   - match: "([A-Ga-g][,']*)"
  #     name: constant.character.note.abc

  # note-length:
  #   - match: (\d*[<>/]*\d*)?
  #     name: constant.numeric.note-length.abc # storage.type.note-length.abc

  # abc-note-sequence:
  #   - include: '#abc-note'
  #   - include: '#grace'
  #   - include: 'decoration'
  #   - include: '#macro'
  #   - include: '#strings'

  # abc-rest-sequence:
  #   - include: '#abc-rest'
  #   - include: '#grace'
  #   - include: '#decoration'
  #   - include: '#macro'
  #   - include: '#strings'

  # abc-space-sequence:
  #   - include: '#abc-space'
  #   - include: '#grace'
  #   - include: '#decoration'
  #   - include: '#macro'
  #   - include: '#strings'

  # abc-chord-elements:
  #   - include: '#abc-note'
  #   - include: '#abc-rest'
  #   - include: '#abc-space'
  #   - include: '#decoration'
  #   - include: '#macro'
  #   - include: '#operators'
