<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>abc</string>
	</array>
	<key>foldingStartMarker</key>
	<string>^X:\d+</string>
	<key>foldingStopMarker</key>
	<string>^[ \t\v\f]*$</string>
	<key>name</key>
	<string>ABC Notation</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>^(X:)[ \t\v\f]*(\d+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.index.abc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.index.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>ABC Tune</string>
			<key>end</key>
			<string>^\s*$</string>
			<key>name</key>
			<string>meta.tune.abc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tune-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#directive</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#field</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#embedded</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>abc-note</key>
		<dict>
			<key>comment</key>
			<string>Note Values (Accidentals, Pitch, Note Length)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.accidental.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.note.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.note-length.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_\^]{2}|=|[_=\^](?:\d(?!\.)*\/*(?:\d*)?))?
  ([A-Ga-g][,']*)
  (\d*(?!\.)/*(?:\d*)?)?</string>
					<key>name</key>
					<string>meta.code.note.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.accidental.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.note.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.note-length.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_\^]{2}|=|[_=\^](?:\d*\/*(?:\d*)?)|(?:\d(?!\.))+)?
  ([A-Ga-g][,']*)
  (\d*(?!\.)&gt;*(?:\d*)?)?</string>
					<key>name</key>
					<string>meta.code.note.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.accidental.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.note.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.note-length.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_\^]{2}|=|[_=\^](?:\d*\/*(?:\d*)?)|(?:\d(?!\.))+)?
  ([A-Ga-g][,']*)
  (\d*(?!\.)&lt;*(?:\d*)?)?</string>
					<key>name</key>
					<string>meta.code.note.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.accidental.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.note.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.note-length.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_\^]{2}|=|[_=\^](?:\d*\/*(?:\d*)?)|(?:\d(?!\.))+)?
  ([A-Ga-g][,']*)
  (\d)*</string>
					<key>name</key>
					<string>meta.code.note.abc</string>
				</dict>
			</array>
		</dict>
		<key>abc-note-sequence</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#grace</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decoration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#abc-note</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#abc-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#abc-space</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#macro</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#barline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#slur</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#chord</string>
				</dict>
			</array>
		</dict>
		<key>abc-rest</key>
		<dict>
			<key>comment</key>
			<string>Rests &amp; Multi-measure Rests</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.abc-rest.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.rest-length.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([XZ])(\d+)?</string>
					<key>name</key>
					<string>meta.code.abc-rest.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.abc-rest.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.rest-length.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([xz])((?:\d*\/*(?:\d*)?)|(?:\d*&gt;*(?:\d*)?)|(?:\d*&lt;*(?:\d*)?))?</string>
					<key>name</key>
					<string>meta.code.abc-rest.abc</string>
				</dict>
			</array>
		</dict>
		<key>abc-space</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.spacer.abc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.space-length.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Spacer</string>
			<key>match</key>
			<string>([yY])(?x:\d+(?:(?:\d*(?:\.\d*)?(?:pt|in|cm)?))?)?</string>
			<key>name</key>
			<string>meta.code.abc-space.abc</string>
		</dict>
		<key>accidental</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language.accidental.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Accidentals</string>
			<key>match</key>
			<string>([_\^]{2}|=|[_=\^]
 (?:\d*/*(?:\d*)?)|
 (?:\d(?!\.))+
)</string>
			<key>name</key>
			<string>meta.code.accidental.abc</string>
		</dict>
		<key>backquote</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.constant.backquote.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Backquote (used for spacing between note sequences)</string>
			<key>match</key>
			<string>(\`)</string>
			<key>name</key>
			<string>meta.code.backquote.abc</string>
		</dict>
		<key>barline</key>
		<dict>
			<key>comment</key>
			<string>Bar lines, Repeat Section Bar Lines,</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.barline.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.type.numeric.barline.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((?:[:|\[\]]*\|[:|\[\]]*)(?![A-Z]:))([1-9](?:[-,][1-9])*)?</string>
					<key>name</key>
					<string>meta.code.barline.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.barline.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.type.numeric.barline.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([:|\[\]]*[|\[\]][\[\]]?(?![A-Z]:))([1-9](?:[-,][1-9])*)</string>
					<key>name</key>
					<string>meta.code.barline.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.barline.abc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\:\:*)</string>
					<key>name</key>
					<string>meta.code.barline.abc</string>
				</dict>
			</array>
		</dict>
		<key>chord</key>
		<dict>
			<key>begin</key>
			<string>(\[)(?!(?:[A-Za-z][:])|(?:[|:]*))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.chord.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Chords</string>
			<key>end</key>
			<string>(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.type.chord.abc</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.code.chord.abc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#abc-note</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#abc-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decoration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#macro</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#union</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#backquote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#slur</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>comment</key>
			<string>Comments</string>
			<key>match</key>
			<string>%(?!%|abc).*</string>
			<key>name</key>
			<string>comment.line.percentage.abc</string>
		</dict>
		<key>decoration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.trait.decoration.symbol.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Decoration Symbols</string>
					<key>match</key>
					<string>([-\.~HLMOPSTuv](?!:))</string>
					<key>name</key>
					<string>meta.code.decoration.symbol.abc</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Decoration Symbols, at start of line</string>
					<key>match</key>
					<string>^([-\.~HLMOPSTuv](?!:))</string>
					<key>name</key>
					<string>meta.code.decoration.symbol.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.decoration.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.trait.decoration.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.decoration.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Decorations</string>
					<key>match</key>
					<string>(!)([[:alpha:]&amp;&amp;[^ \t\v\f!]]*)(!)</string>
					<key>name</key>
					<string>meta.code.decoration.abc</string>
				</dict>
			</array>
		</dict>
		<key>directive</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.percentage.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.directive.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Directives</string>
					<key>match</key>
					<string>(%%)([ \t\v\f]*\w*(?!begin\w*|end\w*)\b)([^%\n\r]*)</string>
					<key>name</key>
					<string>meta.directive.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.percentage.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.namespace.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Namespace</string>
					<key>match</key>
					<string>(%)(abc(?:-\d\.\d)?)</string>
					<key>name</key>
					<string>meta.namespace.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>embedded</key>
		<dict>
			<key>comment</key>
			<string>Typeset Text, Embedded SVG, Embedded PostScript, Embedded HTML, and Embedded JavaScript</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^(%%)[ \t\v\f]*(begintext)\b([ \t\v\f]+(?:obeylines|fill|ragged|justify|align|skip))?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.percentage.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.directive.abc</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.unquoted.typeset.abc</string>
					<key>end</key>
					<string>^(%%)[ \t\v\f]*(endtext)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.percentage.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.text.directive.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(%%)[ \t\v\f]*(beginsvg)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.pseudo.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.function.abc punctuation.definition.sequence.begin.abc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(%%)[ \t\v\f]*(endsvg)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.pseudo.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.function.abc punctuation.definition.sequence.end.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.svg.directive.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(%%)[ \t\v\f]*(beginps)\b([ \t\v\f]+(?:nosvg))?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.percentage.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.directive.abc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(%%)[ \t\v\f]*(endps)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.pseudo.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.ps.directive.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(%%)[ \t\v\f]*(beginjs)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.percentage.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(%%)[ \t\v\f]*(endjs)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.percentage.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.js.directive.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(%%)[ \t\v\f]*(beginml)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.pseudo.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.function.abc punctuation.definition.sequence.begin.abc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(%%)[ \t\v\f]*(endml)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.pseudo.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.function.abc punctuation.definition.sequence.end.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.html.directive.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(I:)[ \t\v\f]*(begintext)\b([ \t\v\f]+(?:obeylines|fill|ragged|justify|align|skip))?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.directive.abc</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.unquoted.free.abc</string>
					<key>end</key>
					<string>^(I:)[ \t\v\f]*(endtext)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.text.instruction.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^I:)[ \t\v\f]*(beginsvg)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.function.abc punctuation.definition.sequence.begin.abc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(^I:)[ \t\v\f]*(endsvg)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.function.abc punctuation.definition.sequence.begin.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.svg.instruction.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^I:)[ \t\v\f]*(beginps)\b([ \t\v\f]+(?:nosvg))?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.directive.abc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>^(I:)[ \t\v\f]*(endps)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.ps.instruction.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^I:)[ \t\v\f]*(beginjs)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>source.javascript</string>
					<key>end</key>
					<string>^(I:)[ \t\v\f]*(endjs)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.directive.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.js.instruction.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^I:)[ \t\v\f]*(beginml)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.function.abc punctuation.definition.sequence.begin.abc</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>source.html</string>
					<key>end</key>
					<string>(^I:)[ \t\v\f]*(endml)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.function.abc punctuation.definition.sequence.begin.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.svg.instruction.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#directive</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>escape</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\\\\)</string>
					<key>name</key>
					<string>constant.character.escape.abc</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\\u\h{4})</string>
					<key>name</key>
					<string>constant.character.escape.abc</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\\[[:punct:]&amp;&amp;[\w]&amp;&amp;[^[ \t\v\f]]]{2})</string>
					<key>name</key>
					<string>constant.character.escape.abc</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:&amp;\w+;)</string>
					<key>name</key>
					<string>constant.character.escape.abc</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:&amp;#\d+;)</string>
					<key>name</key>
					<string>constant.character.escape.abc</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:&amp;#x\h+;)</string>
					<key>name</key>
					<string>constant.character.escape.abc</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\\%)</string>
					<key>name</key>
					<string>constant.character.escape.abc</string>
				</dict>
			</array>
		</dict>
		<key>field</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.field.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.field.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Fields</string>
					<key>match</key>
					<string>^([[:alpha:]&amp;&amp;[^IKXr]]:)([^%\\]*)</string>
					<key>name</key>
					<string>meta.code.field.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.field.remark.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>comment.block.remark.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Remark Field</string>
					<key>match</key>
					<string>^(r:)([^%\\]*)</string>
					<key>name</key>
					<string>meta.code.field.remark.abc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.instruction.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.word.instruction.abc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.instruction.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Instruction Field</string>
					<key>match</key>
					<string>^(I:)[ \t\v\f]*(\w+(?!begin.*|end.*))[ \t\v\f]+([^%\n\r]*)</string>
					<key>name</key>
					<string>meta.code.field.instruction.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#spacing-length</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.key.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.key.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Key Field</string>
					<key>match</key>
					<string>^(K:)[ \t\v\f]*([^%\\]+)</string>
					<key>name</key>
					<string>meta.code.field.key.abc</string>
				</dict>
			</array>
		</dict>
		<key>grace</key>
		<dict>
			<key>begin</key>
			<string>(\{\/?)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.grace.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Grace Notes</string>
			<key>end</key>
			<string>(\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.grace.abc</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.code.grace.abc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#note</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#note-length</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#abc-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decoration</string>
				</dict>
			</array>
		</dict>
		<key>inline-field</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\[[[:alpha:]&amp;&amp;[^IKXr]]:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline-field.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Inline Fields</string>
					<key>contentName</key>
					<string>string.unquoted.inline-field.abc</string>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline-field.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.code.inline-field.abc</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[r:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline-field.remark.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Inline Remark Field</string>
					<key>contentName</key>
					<string>comment.block.remark.abc</string>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline-field.remark.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.code.inline-field.remark.abc</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[I:)[ \t\v\f]*(\w+)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline-field.abc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.word.instruction.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Inline Instruction Field</string>
					<key>contentName</key>
					<string>variable.parameter.instruction.abc</string>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.inline-field.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.field.instruction.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#spacing-length</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>line-break</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.constant.line-break.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Line Break</string>
			<key>match</key>
			<string>(\$(?= *| *$))</string>
			<key>name</key>
			<string>meta.code.line-break.abc</string>
		</dict>
		<key>line-continue</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.constant.line-continue.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Line Continue</string>
			<key>match</key>
			<string>(\\(?= *| *$))</string>
			<key>name</key>
			<string>meta.code.line-continue.abc</string>
		</dict>
		<key>macro</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.macro.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>User-defined Macro</string>
			<key>match</key>
			<string>(\~[a-zA-Z][a-zA-Z0-9]{0,30})</string>
			<key>name</key>
			<string>meta.code.macro.abc</string>
		</dict>
		<key>note</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.character.note.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Pitch Value</string>
			<key>match</key>
			<string>([A-Ga-g][,']*)</string>
			<key>name</key>
			<string>meta.code.note.abc</string>
		</dict>
		<key>note-length</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.note-length.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Note Lengths</string>
			<key>match</key>
			<string>((?:\d*/*(?:\d*)?)|
 (?:\d*&gt;*(?:\d*)?)|
 (?:\d*&lt;*(?:\d*)?)|
 (?:\d+(?!\.))
)</string>
			<key>name</key>
			<string>meta.code.note-length.abc</string>
		</dict>
		<key>operators</key>
		<dict>
			<key>comment</key>
			<string>Tuplets, Backquotes, Unions, Line Breaks, Line Continuations</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tuplet</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#backquote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#union</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-break</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-continue</string>
				</dict>
			</array>
		</dict>
		<key>slur</key>
		<dict>
			<key>begin</key>
			<string>(\((?![\d!:]))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.slur.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Slurs</string>
			<key>end</key>
			<string>(\)(?!\!))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.slur.abc</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.code.slur.abc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#abc-note-sequence</string>
				</dict>
			</array>
		</dict>
		<key>spacing-length</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.float.space-length.abc</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\d*(?:\.\d*)?(?:pt|in|cm)?)</string>
			<key>name</key>
			<string>meta.code.space-length.abc</string>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\"(?![_&lt;&gt;^@]))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.chord.begin.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Chord symbols</string>
					<key>contentName</key>
					<string>string.quoted.double.chord.abc</string>
					<key>end</key>
					<string>(\")</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.chord.end.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.code.string.chord.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>""</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\"[_&lt;&gt;^@])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.annotation.begin.abc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>String Annotations</string>
					<key>contentName</key>
					<string>string.quoted.double.annotation.abc</string>
					<key>end</key>
					<string>(\")</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.annotation.end.abc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.code.string.annotation.abc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>tune-body</key>
		<dict>
			<key>begin</key>
			<string>^(K:)[ \t\v\f]*([^%\\]+)?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.key.abc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.unquoted.key.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Tune Body</string>
			<key>end</key>
			<string>^[ \t\v\f]*$</string>
			<key>name</key>
			<string>meta.tune.body.abc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#abc-note-sequence</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inline-field</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#directive</string>
				</dict>
			</array>
		</dict>
		<key>tuplet</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.tuplet.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Tuplets</string>
			<key>match</key>
			<string>(\(\d+(?::\d*(?::\d*)?)?)</string>
			<key>name</key>
			<string>meta.code.tuplet.abc</string>
		</dict>
		<key>union</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.union.abc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Union Operators</string>
			<key>match</key>
			<string>(\(\&amp;|\&amp;\&amp;?|\&amp;\))</string>
			<key>name</key>
			<string>meta.code.union.abc</string>
		</dict>
		<key>unparsed</key>
		<dict>
			<key>begin</key>
			<string>^[ \t\v\f]*(?!\nX:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.block.free-text.abc</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^[ \t\v\f]*$</string>
			<key>name</key>
			<string>meta.unparsed.abc</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.abc</string>
	<key>uuid</key>
	<string>431a5f26-5897-4146-8415-25a3c4b859c0</string>
</dict>
</plist>
