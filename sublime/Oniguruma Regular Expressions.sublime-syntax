%YAML 1.2
---
file_extensions:
  - ore
scope: source.oniregexp

contexts:
  main:
    # | operator
    - scope: keyword.operator.oniregexp
      match: \|
    # anchors
    - scope: entity.other.control.anchors.oniregexp
      match: \\[bBAZzG]|[$^]

    - include: character_class

    - include: character_property

    - include: set

    - scope: meta.comment.oniregexp
      match: (\(\?#)
      push:
      - meta_scope: comment.block.number-sign.oniregexp
      - match: (?<!\\)\)
        pop: true

    # group
    - scope: meta.regexp.group
      match: |
        (?x) ((?#1)\()
        ((?#2)\?
          (?:<[=!]|
             [>=:!]|
             [imx]{,3}(?:-[imx]{1,3})?(?::(?!\))|(?=\)))|
             [<']((?#3)\w+)[>'])
        )?
      captures:
       1: storage.type.regexp.group.begin.oniregexp
       2: string.regexp constant.other.assertion.oniregexp
       3: variable.other.oniregexp
      push:
        - include: source.oniregexp
        - match: (\))
          captures:
            1: storage.type.regexp.group.end.oniregexp
          pop: true

    - include: special_escapes

    # backref
    - scope: keyword.other.backref.oniregexp
      match: |
        (?x)
          (\\\d+)|
          (\\k[<'](-?\d+|\w+([-+]\d+)?)[>'])
      captures:
        1: variable.other.oniregexp
        2: keyword.other.backref.oniregexp
        3: variable.other.oniregexp

    # subexp call
    - scope: keyword.other.subexp-call.oniregexp
      match: \\g[<'](-?\d+|\w+)[>']
      captures:
        1: variable.other.oniregexp

    - include: escaped_char

  set:
    - scope: meta.string.set.oniregexp
      match: \[(\^?\])?
      push:
        - meta_scope: string.regexp.set.oniregexp
        - match: \]
          pop: true
        - scope: constant.other.posix-bracket.oniregexp
          match: \[:\^?(?>alnum|alpha|ascii|blank|cntrl|digit|graph|lower|print|punct|space|upper|xdigit|word):\]
        - include: set
        - include: character_class
        - include: character_property
        - include: special_escapes
        - include: escaped_char
        - scope: constant.other.range.regexp
          match: .-[^\]]
        - scope: keyword.operator.intersection.regexp
          match: (?<!\[)&&(?!\])

  character_class:
    - scope: keyword.control.character-class.regexp
      match: \\[wWsSdDhH]|\.

  character_property:
    - scope: keyword.contol.character-property.regexp
      match: |
        (?x)
        \\(?:p\{\^?|P\{)(
           (?>Alnum|Alpha|Blank|Cntrl|Digit|Graph|Lower|
              Print|Punct|Space|Upper|XDigit|Word|ASCII)
          |(?>Hiragana|Katakana)
          |(?>Any|Assigned)
          |(?>C|Cc|Cf|Cn|Co|Cs|L|Ll|Lm|Lo|Lt|Lu|
              M|Mc|Me|Mn|N|Nd|Nl|No|P|Pc|Pd|Pe|Pf|Pi|Po|Ps|
              S|Sc|Sk|Sm|So|Z|Zl|Zp|Zs)
          |(?>Arabic|Armenian|Bengali|Bopomofo|Braille|Buginese|
              Buhid|Canadian_Aboriginal|Cherokee|Common|Coptic|
              Cypriot|Cyrillic|Deseret|Devanagari|Ethiopic|Georgian|
              Glagolitic|Gothic|Greek|Gujarati|Gurmukhi|Han|Hangul|
              Hanunoo|Hebrew|Hiragana|Inherited|Kannada|Katakana|
              Kharoshthi|Khmer|Lao|Latin|Limbu|Linear_B|Malayalam|
              Mongolian|Myanmar|New_Tai_Lue|Ogham|Old_Italic|Old_Persian|
              Oriya|Osmanya|Runic|Shavian|Sinhala|Syloti_Nagri|Syriac|
              Tagalog|Tagbanwa|Tai_Le|Tamil|Telugu|Thaana|Thai|Tibetan|
              Tifinagh|Ugaritic|Yi)
        )\}
      captures:
        1: constant.other.property.oniregexp

  special_escapes:
    - scope: constant.character.escape.special.regexp
      match: |
        (?x)\\
        ([tvnrbfae]
        |[0-8]{3}
        |x\h\h
        |x\{7\h{7}\}
        |c\d+
        |M-(\\C-)?\d+
        |C-\d+)

  escaped_char:
    - scope: constant.character.escape.general.regexp
      match: \\.
