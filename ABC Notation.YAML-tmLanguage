# [PackageDev] target_format: plist, ext: tmLanguage
name: ABC Notation
scopeName: source.abc
fileTypes: [abc]
foldingStartMarker: '^X:\d+'
foldingStopMarker: '^[ \t\v\f]*$'
uuid: 431a5f26-5897-4146-8415-25a3c4b859c0

patterns:
  #- include: '#unparsed'
  # Tune Body ends just before the first 'K:' field
  - comment: ABC Tune
    name: meta.tune.abc
    begin: '^(X:)[ \t\v\f]*(\d+)'
    beginCaptures:
      '1': {name: keyword.control.index.abc meta.toc-list.index.abc}
      '2': {name: constant.numeric.index.abc}
    end: '^\s*$'
    patterns:
      - include: '#tune-body'
      - include: '#field'
      - include: '#comments'
      - include: '#directive'
  - include: '#field'
  - include: '#comments'
  - include: '#directive'
  - include: '#embedded'

repository:
  # Unparsed text matches for all text outside of an ABC tune or multi-line
  # block of embedded markup or code content.
  unparsed:
    name: meta.unparsed.abc
    begin: '^[ \t\v\f]*(?!\nX:)'
    beginCaptures:
      '1': {name: comment.block.free-text.abc}
    end: '^[ \t\v\f]*$'

## Global Elements
  escape:
    patterns:
    - name: constant.character.escape.abc
      match: (\\\\)
    - name: constant.character.escape.abc
      match: (\\u\h{4})
    - name: constant.character.escape.abc
      match: (?:\\[[:punct:]&&[\w]&&[^[ \t\v\f]]]{2})
    - name: constant.character.escape.abc
      match: (?:&\w+;)
    - name: constant.character.escape.abc
      match: (?:&#\d+;)
    - name: constant.character.escape.abc
      match: (?:&#x\h+;)
    - name: constant.character.escape.abc
      match: (\\%)

  directive:
    patterns:
    - comment: Directives
      name: meta.directive.abc
      match: '(%%)([ \t\v\f]*\w*(?!begin\w*|end\w*)\b)([^%\n\r]*)'
      captures:
        '1': {name: comment.line.percentage.abc}
        '2': {name: support.function.directive.abc}
        '3': {name: variable.parameter.directive.abc}
    - comment: Namespace
      name: meta.namespace.abc
      match: '(%)(abc(?:-\d\.\d)?)'
      captures:
        '1': {name: comment.line.percentage.abc}
        '2': {name: entity.name.namespace.abc}
      patterns:
      - include: '#comments'
      - include: '#directive'

  comments:
    comment: Comments
    name: comment.line.percentage.abc
    match: '%(?!%|abc).*'

  field:
    patterns:
    - comment: Fields
      name: meta.code.field.abc
      match: ^([[:alpha:]&&[^IKXr]]:)([^%\\]*)
      captures:
        '1': {name: entity.name.function.field.abc}
        '2': {name: string.unquoted.field.abc}
    - comment: Remark Field
      name: meta.code.field.remark.abc
      match: ^(r:)([^%\\]*)
      captures:
        '1': {name: entity.name.function.field.remark.abc}
        '2': {name: comment.block.remark.abc}
    - comment: Instruction Field
      name: meta.code.field.instruction.abc
      match: ^(I:)[ \t\v\f]*(\w+(?!begin.*|end.*))[ \t\v\f]+([^%\n\r]*)
      captures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: keyword.operator.word.instruction.abc}
        '3': {name: variable.parameter.instruction.abc}
      patterns:
      - include: '#spacing-length'
    - comment: Key Field
      name: meta.code.field.key.abc
      match: ^(K:)[ \t\v\f]*([^%\\]+)
      captures:
        '1': {name: keyword.control.key.abc}
        '2': {name: string.unquoted.key.abc}

## ABC Tune Body
  tune-body:
    comment: Tune Body
    name: meta.tune.body.abc
    begin: ^(K:)[ \t\v\f]*([^%\\]+)?
    beginCaptures:
      '1': {name: keyword.control.key.abc}
      '2': {name: string.unquoted.key.abc}
    end: ^[ \t\v\f]*$
    patterns:
      - include: '#abc-note-sequence'
      - include: '#inline-field'
      - include: '#field'
      - include: '#comments'
      - include: '#directive'

## ABC Code Elements
  abc-note-sequence:
    comment: |-
      Note Sequences
      IMPORTANT: This ordering is crucial: Chord symbols must come first,
      so that when matching for barlines, chord starts and ends aren't
      mismatched with repeat section barlines.
    patterns:
    - include: '#chord'
    - include: '#grace'
    - include: '#decoration'
    - include: '#strings'
    - include: '#abc-note'
    - include: '#abc-rest'
    - include: '#abc-space'
    - include: '#macro'
    - include: '#operators'
    - include: '#barline'
    - include: '#slur'

  # Inline Fields
  inline-field:
    patterns:
    - comment: Inline Fields
      name: meta.code.inline-field.abc
      contentName: string.unquoted.inline-field.abc
      begin: (\[[[:alpha:]&&[^IKXr]]:)
      beginCaptures:
        '1': {name: entity.name.function.inline-field.abc}
      end: (\])
      endCaptures:
        '1': {name: entity.name.function.inline-field.abc}
    - comment: Inline Remark Field
      name: meta.code.inline-field.remark.abc
      contentName: comment.block.remark.abc
      begin: (\[r:)
      beginCaptures:
        '1': {name: entity.name.function.inline-field.remark.abc}
      end: (\])
      endCaptures:
        '1': {name: entity.name.function.inline-field.remark.abc}
    - comment: Inline Instruction Field
      name: meta.field.instruction.abc
      contentName: variable.parameter.instruction.abc
      begin: (\[I:)[ \t\v\f]*(\w+)
      beginCaptures:
        '1': {name: entity.name.function.inline-field.abc}
        '2': {name: keyword.operator.word.instruction.abc}
      end: (\])
      endCaptures:
        '1': {name: entity.name.function.inline-field.abc}
      patterns:
      - include: '#spacing-length'

  # ABC Note Constructs
  grace:
    comment: Grace Notes
    name: meta.code.grace.abc
    begin: (\{\/?)
    beginCaptures:
      '1': {name: support.type.grace.abc}
    end: (\})
    endCaptures:
      '1': {name: support.type.grace.abc}
    patterns:
      - include: '#note'
      - include: '#note-length'
      - include: '#abc-rest'
      - include: '#decoration'

  decoration:
    patterns:
    - comment: Decoration Symbols
      name: meta.code.decoration.symbol.abc
      match: ([-\.~HLMOPSTuv](?!:))
      captures:
        '1': {name: entity.name.function.decoration.abc} # entity.name.trait.decoration.symbol.abc
    - comment: Decoration Symbols, at start of line
      name: meta.code.decoration.symbol.abc
      match: ^([-\.~HLMOPSTuv](?!:))
      captures:
        '1': {name: entity.name.function.decoration.abc} # entity.name.trait.decoration.symbol.abc
    - comment: Decorations
      name: meta.code.decoration.abc
      begin: (!)([[:alpha:]<>^&&[^ \t\v\f!]]*)
      beginCaptures:
        '1': {name: entity.name.function.decoration.abc}
        '2': {name: entity.name.function.decoration.abc} # entity.name.trait.decoration.abc
      end: ([()]?!)
      endCaptures:
        '1': {name: entity.name.function.decoration.abc}

  strings:
    patterns:
    - comment: Chord symbols
      name: meta.code.string.chord.abc
      begin: (\"(?![_<>^@]))
      beginCaptures:
        '1': {name: punctuation.definition.string.chord.begin.abc}
      contentName: string.quoted.double.chord.abc
      end: (\")
      endCaptures:
        '1': {name: punctuation.definition.string.chord.end.abc}
      patterns:
        - match: '""'
        - include: '#escape'
    - comment: String Annotations
      name: meta.code.string.annotation.abc
      begin: (\"[_<>^@](?!!))
      beginCaptures:
        '1': {name: punctuation.definition.string.annotation.begin.abc}
      contentName: string.quoted.double.annotation.abc
      end: (\")
      endCaptures:
        '1': {name: punctuation.definition.string.annotation.end.abc}
      patterns:
        - include: '#escape'

  abc-note:
    comment: Note Values (Accidentals, Pitch, Note Length)
    patterns:
    - name: meta.code.note.abc
      match: |-
        (?x)
          ([_\^]{2}|=|[_=\^](?:\d(?!\.)*\/*(?:\d*)?))?
          ([A-Ga-g][,']*)
          (\d*(?!\.)/*(?:\d*)?)?
      captures:
        '1': {name: constant.language.accidental.abc}
        '2': {name: constant.character.note.abc}
        '3': {name: constant.numeric.note-length.abc}
    - name: meta.code.note.abc
      match: |-
        (?x)
          ([_\^]{2}|=|[_=\^](?:\d*\/*(?:\d*)?)|(?:\d(?!\.))+)?
          ([A-Ga-g][,']*)
          (\d*(?![.!])>*(?!!)(?:\d*)?)?
      captures:
        '1': {name: constant.language.accidental.abc}
        '2': {name: constant.character.note.abc}
        '3': {name: constant.numeric.note-length.abc}
    - name: meta.code.note.abc
      match: |-
        (?x)
          ([_\^]{2}|=|[_=\^](?:\d*\/*(?:\d*)?)|(?:\d(?!\.))+)?
          ([A-Ga-g][,']*)
          (\d*(?![.!])<*(?!!)(?:\d*)?)?
      captures:
        '1': {name: constant.language.accidental.abc}
        '2': {name: constant.character.note.abc}
        '3': {name: constant.numeric.note-length.abc}
    - name: meta.code.note.abc
      match: |-
        (?x)
          ([_\^]{2}|=|[_=\^](?:\d*\/*(?:\d*)?)|(?:\d(?!\.))+)?
          ([A-Ga-g][,']*)
          (\d)*
      captures:
        '1': {name: constant.language.accidental.abc}
        '2': {name: constant.character.note.abc}
        '3': {name: constant.numeric.note-length.abc}


  # Accidentals, Pitch Values, and Note Lengths
  accidental:
    comment: Accidentals
    name: meta.code.accidental.abc
    match: |-
      ([_\^]{2}|=|[_=\^]
       (?:\d*/*(?:\d*)?)|
       (?:\d(?!\.))+
      )
    captures:
      '1': {name: constant.language.accidental.abc}

  note:
    comment: Pitch Value
    name: meta.code.note.abc
    match: ([A-Ga-g][,']*)
    captures:
      '1': {name: constant.character.note.abc}

  note-length:
    comment: Note Lengths
    name: meta.code.note-length.abc
    match: |-
      ((?:\d*/*(?:\d*)?)|
       (?:\d*(?![.!])>*(?!!)(?:\d*)?)|
       (?:\d*(?![.!])<*(?!!)(?:\d*)?)|
       (?:\d+(?!\.))
      )
    captures:
      '1': {name: constant.numeric.note-length.abc}

  # Rests
  abc-rest:
    comment: Rests & Multi-measure Rests
    patterns:
    - name: meta.code.abc-rest.abc
      match: ([XZ])(\d+)?
      captures:
        # constant.character.rest.abc
        '1': {name: storage.type.abc-rest.abc}
        '2': {name: constant.numeric.rest-length.abc}
    - name: meta.code.abc-rest.abc
      match: ([xz])((?:\d*\/*(?:\d*)?)|(?:\d*(?![.!])>*(?!!)(?:\d*)?)|(?:\d*(?![.!])<*(?!!)(?:\d*)?))?
      captures:
        '1': {name: storage.type.abc-rest.abc} # constant.character.rest.abc
        '2': {name: constant.numeric.rest-length.abc}

  # Spacing Elements
  abc-space:
    comment: Spacer
    name: meta.code.abc-space.abc
    match: ([yY])(?x:\d+(?:(?:\d*(?:\.\d*)?(?:pt|in|cm)?))?)?
    captures:
      '1': {name: storage.type.spacer.abc}
      '2': {name: constant.numeric.space-length.abc}

  spacing-length:
    name: meta.code.space-length.abc
    match: (\d*(?:\.\d*)?(?:pt|in|cm)?)
    captures:
      '1': {name: constant.numeric.float.space-length.abc}

  # Barlines
  ## NOTE: Repeat section barlines act as a catch-all for any stray `]`,
  ## to prevent being matched as the end of a chord.
  barline:
    comment: Bar lines, Repeat Section Bar Lines, 
    patterns:
    - name: meta.code.barline.abc
      match: (\||\|\]|\|\||\[\||\[\|\])(\d(?:[-,]\d)*)?
      captures:
        '1': {name: keyword.operator.barline.abc}
    - name: meta.code.barline.abc
      match: (:*[|\[\]](?![A-Za-z]:))(\d+(?:[-,]\d)*)?
      captures:
        '1': {name: keyword.operator.barline.abc}
        '2': {name: support.type.numeric.barline.abc}
    - name: meta.code.barline.abc
      match: (\|)(\d(?:[-,]\d)*)?
      captures:
        '1': {name: keyword.operator.barline.abc}
        '2': {name: support.type.numeric.barline.abc}
    - name: meta.code.barline.abc
      match: (\|:+|:+\||::+|:+\|:+)
      captures:
        '1': {name: keyword.operator.barline.abc}


  # Slurs and Chords
  slur:
    comment: Slurs
    name: meta.code.slur.abc
    begin: (\((?![\d!&:]))
    beginCaptures:
      '1': {name: support.type.slur.abc}
    end: (\)(?!!))
    endCaptures:
      '1': {name: support.type.slur.abc}
    patterns:
      - include: '#abc-note-sequence'

  chord:
    comment: Chords
    name: meta.code.chord.abc
    begin: (\[(?![|:\d]|(?:[A-Za-z]:)|(?:\||\|\]|\|\||\[\||\[\|\])))
    beginCaptures:
      '1': {name: support.type.chord.abc}
    end: ((?<!\|)\](?!\d))
    endCaptures:
      '1': {name: support.type.chord.abc}
    patterns:
      - include: '#abc-note'
      - include: '#abc-rest'
      - include: '#decoration'
      - include: '#macro'
      - include: '#union'
      - include: '#backquote'
      - include: '#slur'

  operators:
    comment: Tuplets, Backquotes, Unions, Line Breaks, Line Continuations
    patterns:
      - include: '#tuplet'
      - include: '#backquote'
      - include: '#union'
      - include: '#line-break'
      - include: '#line-continue'

  tuplet:
    comment: Tuplets
    name: meta.code.tuplet.abc
    match: (\(\d+(?::\d*(?::\d*)?)?)
    captures:
      '1': {name: support.type.tuplet.abc}

  backquote:
    comment: Backquote (used for spacing between note sequences)
    name: meta.code.backquote.abc
    match: (\`)
    captures:
      '1': {name: support.constant.backquote.abc}

  union:
    comment: Union Operators
    name: meta.code.union.abc
    match: (\(\&|\&\&?|\&\))
    captures:
      '1': {name: support.function.union.abc}

  line-break:
    comment: Line Break
    name: meta.code.line-break.abc
    match: (\$(?= *| *$))
    captures:
      '1': {name: support.constant.line-break.abc}

  line-continue:
    comment: Line Continue
    name: meta.code.line-continue.abc
    match: (\\(?= *| *$))
    captures:
      '1': {name: support.constant.line-continue.abc}

  # Macros
  macro:
    comment: User-defined Macro
    name: meta.code.macro.abc
    match: (\~[a-zA-Z][a-zA-Z0-9]{0,30})
    captures:
      '1': {name: support.function.macro.abc}

## Embedded Content
  embedded:
    comment: Typeset Text, Embedded SVG, Embedded PostScript, Embedded HTML, and Embedded JavaScript
    patterns:
    - name: meta.text.directive.abc
      contentName: string.unquoted.typeset.abc
      begin: ^(%%)[ \t\v\f]*(begintext)\b([ \t\v\f]+(?:obeylines|fill|ragged|justify|align|skip))?
      beginCaptures:
        '1': {name: comment.line.percentage.abc}
        '2': {name: support.function.directive.abc}
        '3': {name: variable.parameter.directive.abc}
      end: ^(%%)[ \t\v\f]*(endtext)\b
      endCaptures:
        '1': {name: comment.line.percentage.abc}
        '2': {name: support.function.directive.abc}
      patterns:
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.svg.directive.abc
      begin: (%%)[ \t\v\f]*(beginsvg)\b
      beginCaptures:
        '1': {name: punctuation.definition.comment.pseudo.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      end: (%%)[ \t\v\f]*(endsvg)\b
      endCaptures:
        '1': {name: punctuation.definition.comment.pseudo.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.end.abc}
      patterns:
      #- include: source.xml
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.ps.directive.abc
      begin: (%%)[ \t\v\f]*(beginps)\b([ \t\v\f]+(?:nosvg))?
      beginCaptures:
        '1': {name: comment.line.percentage.abc}
        '2': {name: support.function.directive.abc}
        '3': {name: variable.parameter.directive.abc}
      end: (%%)[ \t\v\f]*(endps)\b
      endCaptures:
        '1': {name: punctuation.definition.comment.pseudo.abc}
        '2': {name: support.function.directive.abc}
      patterns:
      #- include: source.ps
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.js.directive.abc
      begin: (%%)[ \t\v\f]*(beginjs)\b
      beginCaptures:
        '1': {name: comment.line.percentage.abc}
        '2': {name: support.function.directive.abc}
      end: (%%)[ \t\v\f]*(endjs)\b
      endCaptures:
        '1': {name: comment.line.percentage.abc}
        '2': {name: support.function.directive.abc}
      patterns:
      #- include: source.js
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.html.directive.abc
      begin: (%%)[ \t\v\f]*(beginml)\b
      beginCaptures:
        '1': {name: punctuation.definition.comment.pseudo.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      end: (%%)[ \t\v\f]*(endml)\b
      endCaptures:
        '1': {name: punctuation.definition.comment.pseudo.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.end.abc}
      patterns:
      #- include: source.html
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.text.instruction.abc
      contentName: string.unquoted.free.abc
      begin: ^(I:)[ \t\v\f]*(begintext)\b([ \t\v\f]+(?:obeylines|fill|ragged|justify|align|skip))?
      beginCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: support.function.directive.abc}
        '3': {name: variable.parameter.directive.abc}
      end: ^(I:)[ \t\v\f]*(endtext)\b
      endCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: support.function.directive.abc}
      patterns:
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.svg.instruction.abc
      begin: (^I:)[ \t\v\f]*(beginsvg)\b
      beginCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      end: (^I:)[ \t\v\f]*(endsvg)\b
      endCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      patterns:
      #- include: source.xml
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.ps.instruction.abc
      begin: (^I:)[ \t\v\f]*(beginps)\b([ \t\v\f]+(?:nosvg))?
      beginCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: support.function.directive.abc}
        '3': {name: variable.parameter.directive.abc}
      end: ^(I:)[ \t\v\f]*(endps)\b
      endCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: support.function.directive.abc}
      patterns:
      #- include: source.ps
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.js.instruction.abc
      contentName: source.javascript
      begin: (^I:)[ \t\v\f]*(beginjs)\b
      beginCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: support.function.directive.abc}
      end: ^(I:)[ \t\v\f]*(endjs)\b
      endCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: support.function.directive.abc}
      patterns:
      #- include: source.js
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
    - name: meta.svg.instruction.abc
      contentName: source.html
      begin: (^I:)[ \t\v\f]*(beginml)\b
      beginCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      end: (^I:)[ \t\v\f]*(endml)\b
      endCaptures:
        '1': {name: support.constant.instruction.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      patterns:
      #- include: source.html
      - include: '#escape'
      - include: '#comments'
      - include: '#directive'
...
