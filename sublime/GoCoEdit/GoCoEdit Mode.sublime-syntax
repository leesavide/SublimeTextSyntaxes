%YAML 1.2
---
name: GoCoEdit Mode
file_extensions: ["gcemode"]
scope: source.gcemode

contexts:
  prototype:
    - include: comments

  main:
    - include: value

  array:
    - match: '(\[)'
      captures:
        1: punctuation.definition.array.begin.gcemode
      push:
        - meta_scope: meta.structure.array.gcemode
        - match: '(\])'
          captures:
            1: punctuation.definition.array.end.gcemode
          pop: true
        - include: value
        - match: ','
          scope: punctuation.separator.array.gcemode

  comments:
    - match: (//).*$\n?
      scope: comment.line.double-slash.gcemode
      captures:
        1: punctuation.definition.comment.gcemode

  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.gcemode

  number:
    # Handles integer and decimal numbers
    - match: |-
        (?x)
          (-?(?:0|[1-9]\d*)
          (?:(?:\.\d+)?(?:[eE][+-]?\d+)?)?)
      scope: constant.numeric.gcemode

  object:
    # a JSON object
    - match: '\{'
      scope: punctuation.definition.dictionary.begin.gcemode
      push:
        - meta_scope: meta.structure.dictionary.gcemode
        - match: '\}'
          scope: punctuation.definition.dictionary.end.gcemode
          pop: true
        - include: string
      # Global Keys
        - match: |-
            (?x)
              (?:^\s*)?(\")
              (token(?:izer)?|name|ext|state|parse|
               overwriteState|stateAfterMatch|recoverState|
               onlyOnLineStart|dash_docsets|symbol_search|hint|global)
              (\")\s*(:)
          scope: meta.structure.key.gcemode
          captures:
            1: punctuation.definition.string.begin.gcemode
            2: keyword.control.gcemode
            3: punctuation.definition.string.end.gcemode
            4: punctuation.separator.dictionary.key-value.gcemode
          push:
            - meta_scope: meta.structure.dictionary.value.gcemode
            - match: '(,)|(?=\})'
              captures:
                1: punctuation.separator.dictionary.pair.gcemode
              pop: true
            - include: value
      # Regexp Key(s)
        - match: '(?:^\s*)?(\")(regex)(\")\s*(:)'
          scope: meta.structure.key.gcemode
          captures:
            1: punctuation.definition.string.begin.gcemode
            2: keyword.control.regex.gcemode
            3: punctuation.definition.string.end.gcemode
            4: punctuation.separator.dictionary.key-value.gcemode
          push:
            - meta_scope: meta.structure.dictionary.value.gcemode
            - match: '(,)|(?=\})'
              captures:
                1: punctuation.separator.dictionary.pair.gcemode
              pop: true
            - include: regexString

  string:
    - match: '(")'
      captures:
        1: punctuation.definition.string.begin.gcemode
      push:
        - meta_scope: string.quoted.double.gcemode
        - include: keywords
        - match: (?x:\\(?:["\\/bfnrt]|u[0-9a-fA-F]{4}))
          scope: constant.character.escape.gcemode
        - match: '\\(?!["\\/bfnrt]|u[0-9a-fA-F]{4}).'
          scope: invalid.illegal.unrecognized-string-escape.gcemode
        - match: '(")'
          captures:
            1: punctuation.definition.string.end.gcemode
          pop: true

  regexArray:
    - scope: meta.structure.array.regex.gcemode
      match: '(\[)'
      captures:
        1: punctuation.definition.array.begin.gcemode
      push:
        - match: '(\])'
          captures:
            1: punctuation.definition.array.end.gcemode
          pop: true
      patterns:
        - include: '#regexString'
        - match: ','
          name: punctuation.separator.array.gcemode

  regexString:
    - match: '(")'
      scope: punctuation.definition.string.begin.gcemode
      push:
        - include: "Packages/GoCoEdit/Regular Expression (Escaped).sublime-syntax"
        - match: '((?!\\)(?=\")\")'
          scope: punctuation.definition.string.end.gcemode
          pop: true

  keywords:
    # TODO: Make 'token' value match only from allowed list of theme tokens
    - match: |-
        (?x)
          (?:^\s*)?
          (?=\")(name|ext|gutters|token(?:izer)?|state|parse|token|extends|
          onlyOnLineStart|stateAfterMatch|overwriteState|recoverState|
          dash_docsets|symbol_search)(?=\")
          \s*(:)
      captures:
        1: punctuation.definition.string.begin.gcemode
        2: keyword.control.gcemode

  value:
    - include: constant
    - include: number
    - include: string
    - include: array
    - include: object
...
