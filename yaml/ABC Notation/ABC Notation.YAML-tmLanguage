# [PackageDev] target_format: plist, ext: tmLanguage
---
name: ABC Notation
scopeName: source.abc
fileTypes: [abc, abh, abp]
foldingStartMarker: '^X:|\('
foldingStopMarker: '^(?:\s*)?$|\)'
uuid: c87e9f8a-efbb-4aa8-83e2-c6c26f2aa6fb

patterns:
  # Tune Body ends just before the first 'K:' field
  - comment: ABC Tune
    name: meta.tune.abc
    begin: '^(X:)\s*(\d+)'
    beginCaptures:
      '1': {name: entity.name.tag.index.abc}
      '2': {name: variable.parameter.index.abc}
    end: '^(\s*)?$'
    patterns:
      - include: '#tune-body'
      - include: '#title-field'
      - include: '#fields'
      - include: '#comments'
      - include: '#directive'
  - include: '#prototype'
  - include: '#embedded-content'

repository:
## Escapes, Fields, Comments
  prototype:
    patterns:
      - include: '#escape'
      - include: '#fields'
      - include: '#comments'

  escape:
    comment: Escape Characters
    patterns:
      - name: constant.character.escape.abc
        match: (\\(?:\\|%|[^ \n\r]|u\h{4}|u\h{8}|\\[[:punct:]&&[\w]&&[^[ \t\v\f]]]{2}))
      - name: constant.character.escape.abc
        match: (?:&\w+;)
      - name: constant.character.escape.abc
        match: (?:&#\d+;)
      - name: constant.character.escape.abc
        match: (?:&#x\h+;)

  fields:
    comment: Instruction field, Info fields, Voice field, Part field
    patterns:
      - include: '#instruction-field'
      - name: meta.field.abc
        begin: '^((?>[[:alpha:]+&&[^IKPVTXr]]:))'
        beginCaptures:
          '1': {name: support.function.field.abc}
        contentName: string.unquoted.field.abc
        end: $
        patterns:
          - include: '#comments'
          - include: '#escape'
      - name: meta.field.voice.abc
        begin: '^((?>V:))'
        beginCaptures:
          '1': {name: entity.name.tag.voice.abc}
        contentName: variable.parameter.voice.abc
        end: $
        patterns:
          - include: '#comments'
          - include: '#escape'
      - name: meta.field.part.abc
        begin: '^((?>P:))'
        beginCaptures:
          '1': {name: entity.name.tag.part.abc}
        contentName: variable.parameter.part.abc
        end: $
        patterns:
          - include: '#comments'
          - include: '#escape'
  key-field:
    comment: Key Field. The key is significant in that it indicates where the start of the tune body is.
    name: meta.field.key.abc
    begin: '^(?>(K:)\s*\b([^% \n\r]+)?\b)'
    beginCaptures:
      '1': {name: entity.name.tag.key.abc}
      '2': {name: variable.parameter.key.abc}
    # '3': {name: string.unquoted.key.abc}
    contentName: string.unquoted.key.abc
    end: $
    patterns:
      - include: '#prototype'
  title-field:
    comment: Title Field. This field is only permitted in the header or body of a tune.
    name: meta.field.title.abc
    begin: '^((?>T:))'
    beginCaptures:
      '1': {name: entity.name.tag.title.abc}
    contentName: string.unquoted.title.abc
    end: $
    patterns:
      - include: '#prototype'

  comments:
    comment: Line Comments, Directives / Pseudo-Comments, Namespace Comments, and Remark Fields
    patterns:
      - name: comment.line.percentage.abc
        begin: '(?:^\s*)?(?>%(?!%|abc))'
        beginCaptures:
          '1': {name: comment.line.percentage.abc punctuation.definition.comment.abc}
        end: $
        patterns:
          - include: '#escape'
          - include: '#comments'
          - include: '#directive'
      - name: comment.line.namespace.abc
        match: '(?:^\s*)?(?>(%)(abc(?:-\d\.\d)?))'
        captures:
          '1': {name: punctuation.definition.comment.abc}
          '2': {name: keyword.other.special-method.namespace.abc}
        patterns:
          - include: '#escape'
          - include: '#comments'
          - include: '#directive'
      - name: meta.field.remark.abc
        begin: '^(r:)'
        beginCaptures:
          '1': {name: support.function.field.remark.abc}
        contentName: comment.line.remark.abc
        end: $
        patterns:
          - include: '#escape'
          - include: '#comments'
          - include: '#directive'
      - include: '#directive'

## Container Contexts
  tune-body:
    comment: ABC Tune Body
    name: meta.tune.body.abc
    begin: '^(?>(K:)\s*(\w+)?)\b\s*([^%\r\n]*)'
    beginCaptures:
      '1': {name: entity.name.tag.key.abc}
      '2': {name: keyword.control.key.abc}
      '3': {name: string.unquoted.key.abc}
    end: '^(\s*)?$'
    patterns:
      - include: '#fields'
      - include: '#title-field'
      - include: '#key-field'
      - include: '#barline'
      - include: '#inline-field'
      - include: '#abc-chord'
      - include: '#abc-note'
      - include: '#abc-rest'
      - include: '#abc-space'
      - include: '#grace'
      - include: '#decoration'
      - include: '#macro'
      - include: '#strings'
      - include: '#operators'
      - include: '#prototype'

## Instructions / Directives
  directive:
    name: meta.directive.abc
    begin: '(%%)\s*((?!(?:begin|end(?:text|svg|ps|js|md|ml))|postscript|ps)\w*)\b'
    beginCaptures:
      '1': {name: comment.line.percentage.directive.abc punctuation.definition.comment.abc}
      '2': {name: keyword.operator.word.directive.abc}
    contentName: variable.parameter.directive.abc
    end: $
    patterns:
      # MIDI keywords
      - name: keyword.operator.word.directive.midi.abc
        match: |-
          (?x)
            (MIDI +
              (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|
              bend(?:velocity|string)|chord(?:attack|name|program)|
              control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|
              drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|
              gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|
              portamento|program|ptstress|randomchordattack|ratio|stressmodel|
              snt|rtranspose|temperament(?:linear|equal|normal)|transpose|
              trim|vol(inc)?)\b
      - name: constant.numeric.float.length-unit.abc
        match: '(\d*(?:\.\d*)?(?:pt|in|cm)?)'
      - name: storage.type.directive.abc
        match: '(?i)\b(true|false|yes|no|on|off)\b'
      # TODO: include more keywords to be highlighted
      - include: '#comments'

  instruction-field:
    patterns:
      - comment: Instruction Field
        name: meta.field.instruction.abc
        begin: '(^I:)\s*((?!(?:begin|end(?:text|svg|ps|js|md|ml))|postscript|ps)\w+)\b\s+([^%\r\n]*)'
        beginCaptures:
          '1': {name: entity.name.tag.instruction.abc}
          '2': {name: keyword.operator.word.directive.abc}
          '3': {name: variable.parameter.directive.abc}
        contentName: variable.parameter.directive.abc
        end: $
        patterns:
          - include: '#escape'
          - include: '#comments'
          # MIDI keywords
          - name: keyword.operator.word.directive.midi.abc
            match: |-
              (?x)
                (MIDI +
                  (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|
                  bend(?:velocity|string)|chord(?:attack|name|program)|
                  control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|
                  drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|
                  gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|
                  portamento|program|ptstress|randomchordattack|ratio|stressmodel|
                  snt|rtranspose|temperament(?:linear|equal|normal)|transpose|
                  trim|vol(inc)?)\b
          - name: storage.type.directive.abc
            match: '(?i)(true|false|yes|no|on|off)\b'
          - name: constant.numeric.float.length-unit.abc
            match: '(\d*(?:\.\d*)?(?:pt|in|cm)?)\b'
      - comment: PostScript Instruction Field
        name: meta.ps.abc
        begin: '(^I:)\s*(postscript|ps)\b'
        beginCaptures:
          '1': {name: entity.name.tag.instruction.abc}
          '2': {name: support.function.directive.abc}
        end: $
        patterns:
          - include: source.postscript
          - include: '#prototype'

  inline-instruction:
    patterns:
      - comment: Inline Instruction Field
        name: meta.inline-field.instruction.abc
        begin: '(?:(\[I:)\s*((?!(?:begin|end(?:text|svg|ps|js|md|ml))|postscript|ps)\w+)\b)'
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.instruction.abc}
          '2': {name: keyword.operator.word.instruction.abc}
        contentName: variable.parameter.instruction.abc
        end: '\s*((?>\]))'
        endCaptures:
          '1': {name: entity.name.tag.inline-field.instruction.abc}
        patterns:
          - include: '#escape'
          # MIDI keywords
          - name: keyword.operator.word.directive.midi.abc
            match: |-
              (?x)
                (MIDI +
                  (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|
                  bend(?:velocity|string)|chord(?:attack|name|program)|
                  control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|
                  drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|
                  gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|
                  portamento|program|ptstress|randomchordattack|ratio|stressmodel|
                  snt|rtranspose|temperament(?:linear|equal|normal)|transpose|
                  trim|vol(inc)?)\b
          - name: storage.type.directive.abc
            match: '(?i)(true|false|yes|no|on|off)\b'
          - name: constant.numeric.float.length-unit.abc
            match: '(\d*(?:\.\d*)?(?:pt|in|cm)?)\b'
      - comment: Inline PostScript Field
        name: meta.ps.abc
        begin: '(\[I:)\s*(postscript|ps)\b'
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.instruction.abc}
          '2': {name: keyword.operator.word.instruction.abc}
        end: '\s*((?>\]))'
        endCaptures:
          '1': {name: entity.name.tag.inline-field.instruction.abc}
        patterns:
          - include: source.postscript

## ABC Code Elements
  abc-note:
    comment: Note Values (Accidentals, Pitch, Note Length)
    patterns:
      - match: |-
          (?x)
            ([_=\^](?:\d*\/*\d*)|=|[_\^]{2})?
            ([A-Ga-g][,']*)
            (\d*[<>/]*\d*)?
        captures:
          '1': {name: constant.language.accidental.abc}
          '2': {name: constant.character.note.abc}
          '3': {name: storage.type.note-length.abc}

  abc-rest:
    comment: Rests & Multi-measure Rests
    patterns:
      - name: meta.code.abc-rest.abc
        match: ([XZ])(\d+)?
        captures:
          '1': {name: storage.type.abc-rest.abc}
          '2': {name: storage.type.rest-length.abc}
      - name: meta.code.abc-rest.abc
        match: ([xz])(\d*[<>/]*\d*)?
        captures:
          '1': {name: storage.type.abc-rest.abc}
          '2': {name: storage.type.rest-length.abc}

  abc-space:
    comment: Spacing Rest
    name: meta.code.abc-space.abc
    match: ([yY])(\d+(?:\.\d*(?:pt|in|cm)?)?)?\b
    captures:
      '1': {name: storage.type.spacer.abc}
      '2': {name: constant.numeric.space-length.abc}

  decoration:
    comment: Decoration Symbols
    patterns:
      - name: variable.language.decoration.abc
        match: (?:^\s*)?([-\.~HLMOPSTuv](?!:))
      - name: variable.language.decoration.abc
        match: (!\w+!)
      - name: variable.language.decoration.abc
        match: |-
          (?x)
            (!(?:\+|-[()]|\/{1,3}|[0-5]|\<[()]?|\>[()]?|\^|
               accent|arpeggio|beam-accel|beam-rall|beambr[12]|beamon|
               breath|coda|courtesy|crescendo[()]?|
               D\.C\.(?:alcoda|alfine)?|D\.S\.(?:alcoda|alfine)?|
               dacapo|dacoda|diminuendo[()]?|dot|downbow|editorial|
               emphasis|f+|fermata|fine|gmark|invertedfermata|
               invertedturn|invertedturnx|invisible|longphrase|
               lowermordent|marcato|mediumphrase|mf|mordent|mp|open|p+|
               plus|pralltriller|rbend|rbstop|roll|segno|sfz|shortphrase|
               slide|snap|stemless|tenuto|thumb|trem[1-4]|trill[()]?|
               turn|turnx|upbow|uppermordent|wedge|xstem|\~[()])!)
      - name: variable.language.decoration.abc
        match: (~(?![h-wH-W][a-zA-Z0-9]*))

  macro:
    comment: User-defined Macro
    name: support.type.macro.abc
    match: (\~[h-zH-Z][a-zA-Z0-9]{,30})

  grace:
    comment: Grace Notes
    name: meta.code.grace.abc
    begin: (\{\/?)
    beginCaptures:
      '1': {name: support.type.grace.abc}
    end: (\})
    endCaptures:
      '1': {name: support.type.grace.abc}
    patterns:
      - match: ([A-Ga-g][,']*)
        name: constant.character.note.abc
      - match: (\d*[<>/]*\d*)?
        name: storage.type.note-length.abc
      - include: '#abc-rest'
      - include: '#decoration'

  operators:
    comment: Overlay Operators, Line Continuations, Slurs, Ties, Line Breaks, Tuplets
    patterns:
      - match: (\(\&|\&\&?|\&\))
        name: support.function.overlay.abc
      - match: (\\(?= *| *$))
        name: support.function.line-continue.abc
      - match: ((?:\((?![\d:])[',]?)|\))
        name: support.function.slur.abc
      - match: ([-\.`])
        name: support.type.ties.abc
      - match: (\$(?= *| *$))
        name: support.type.line-break.abc
      - match: (\(\d+(?::\d*(?::\d*)?)?)
        name: support.type.tuplet.abc

  strings:
    comment: Chord symbols and String Annotations
    patterns:
      - include: '#chord-symbol'
      - include: '#annotation'

  chord-symbol:
    comment: String Chord Symbols
    name: string.quoted.double.chord.abc
    begin: '("(?![_<>^@]))'
    beginCaptures:
      '1': {name: punctuation.definition.string.chord.begin.abc}
    end: '(")'
    endCaptures:
      '1': {name: punctuation.definition.string.chord.end.abc}
    patterns:
      - include: '#escape'

  annotation:
    comment: String Annotations
    name: string.quoted.double.annotation.abc
    begin: '(\"[_<>^@])'
    beginCaptures:
      '1': {name: punctuation.definition.string.annotation.begin.abc}
    contentName: string.quoted.double.annotation.abc
    end: '(")'
    endCaptures:
      '1': {name: punctuation.definition.string.annotation.end.abc}
    patterns:
      - include: '#escape'

## Barlines, Chord Sequences, Inline Fields
  barline:
    comment: Bar lines, Repeat Section Bar Lines
    patterns:
      - name: meta.barline.invisible.abc
        match: '((?>\[\|\]|\[\]))((?>\d+(?:[,-]\d+)*))?'
        captures:
          '1': {name: comment.block.documentation.barline.abc}
          '2': {name: comment.block.documentation.barline.repeat-length.abc}
      - name: meta.barline.abc
        match: '((?>:+))'
        captures:
          '1': {name: punctuation.separator.barline.abc}
      - name: meta.barline.abc
        match: '(\[\[)'
        captures:
          '1': {name: punctuation.separator.barline.abc}
      - name: meta.barline.abc
        match: '(\|\])'
        captures:
          '1': {name: punctuation.separator.barline.abc}
      - name: meta.barline.abc
        match: ((?>[\[\|\]]:+))
        captures:
          '1': {name: punctuation.separator.barline.abc}
      - name: meta.barline.abc
        match: '((?>:*\|+))((?>\d+(?:[,-]\d+)*))?'
        captures:
          '1': {name: punctuation.separator.barline.abc}
          '2': {name: punctuation.separator.barline.repeat-length.abc}
      - name: meta.barline.abc
        match: '((?>:*\]))((?>\d+(?:[,-]\d+)*))'
        captures:
          '1': {name: punctuation.separator.barline.abc}
          '2': {name: punctuation.separator.barline.repeat-length.abc}
      - name: meta.barline.abc
        match: '((?>:*\[+(?![a-zA-Z]:|[^\[\s\r\n:\d\|\]])))((?>\d+(?:[,-]\d+)*))?'
        captures:
          '1': {name: punctuation.separator.barline.abc}
          '2': {name: punctuation.separator.barline.repeat-length.abc}

  abc-chord:
    comment: Chord Sequences
    name: meta.chord.abc
    begin: |-
      (?x)
        (\[
          (?![\[\|\]<>/\d\r\n\s]|(?:[a-zA-Z]:))
        )
    beginCaptures:
      '1': {name: support.type.decoration.chord.abc}
    end: (\](?<![:\|]))(\d*[<>/]*\d*)?
    endCaptures:
      '1': {name: support.type.decoration.chord.abc}
      '2': {name: storage.type.note-length.abc}
    patterns:
      - include: '#abc-note'
      - include: '#abc-rest'
      - include: '#abc-space'
      - include: '#decoration'
      - include: '#macro'
      - include: '#operators'

  inline-field:
    patterns:
      - include: '#inline-instruction'
      - comment: Inline Info Fields
        name: meta.inline-field.abc
        begin: ((?>\[[[:alpha:]&&[^IKPVXr]]:))\s*
        beginCaptures:
          '1': {name: support.function.inline-field.abc}
        contentName: string.unquoted.inline-field.abc
        end: \s*((?>\]))
        endCaptures:
          '1': {name: support.function.inline-field.abc}
      - comment: Inline Remark Field
        name: meta.inline-field.remark.abc
        begin: ((?>\[r:))\s*
        beginCaptures:
          '1': {name: support.function.inline-field.remark.abc}
        contentName: comment.block.remark.abc
        end: \s*((?>\]))
        endCaptures:
          '1': {name: support.function.inline-field.remark.abc}
      - comment: Inline Voice Field
        name: meta.inline-field.voice.abc
        begin: ((?>\[V:))\s*
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.voice.abc}
        contentName: variable.parameter.voice.abc
        end: \s*((?>\]))
        endCaptures:
          '1': {name: entity.name.tag.inline-field.voice.abc}
        patterns:
          - include: '#escape'
      - comment: Inline Part Field
        name: meta.inline-field.part.abc
        begin: ((?>\[P:))\s*
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.part.abc}
        contentName: variable.parameter.part.abc
        end: \s*((?>\]))
        endCaptures:
          '1': {name: entity.name.tag.inline-field.part.abc}
        patterns:
          - include: '#escape'
      - comment: Inline Title Field
        name: meta.inline-field.title.abc
        begin: ((?>\[T:))\s*
        beginCaptures:
          '1': {name: entity.name.tag.inline-field.title.abc}
        contentName: string.unquoted.title.abc
        end: \s*((?>\]))
        endCaptures:
          '1': {name: entity.name.tag.inline-field.title.abc}
        patterns:
          - include: '#escape'
      - comment: Inline Key Field
        name: meta.inline-field.key.abc
        begin: ((?>\[K:)\s*\b([^% \n\r]+)?)\b
        beginCaptures:
          '1': {name: entity.name.tag.part.abc}
          '2': {name: variable.parameter.key.abc}
        contentName: string.unquoted.key.abc
        end: \s*((?>\]))
        endCaptures:
          '1': {name: entity.name.tag.inline-field.key.abc}
        patterns:
          - include: '#escape'

## Embedded Content
  embedded-content:
    patterns:
      - comment: Typeset Text
        name: meta.typeset.abc
        begin: '(%%)(begintext)\b(\s+(?:obeylines|fill|ragged|justify|align|skip))?\b'
        beginCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
          '3': {name: variable.parameter.directive.abc}
        contentName: string.unquoted.typeset.abc
        end: '(%%)\s*(endtext)'
        endCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        patterns:
          - include: '#prototype'
      - comment: Embedded HTML
        name: meta.html.abc
        begin: '(%%)\s*(beginml)\b'
        beginCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        end: '(%%)\s*(endml)'
        endCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        patterns:
          - include: text.html.basic
          - include: '#prototype'
      - comment: Embedded JavaScript
        name: meta.js.abc
        begin: '(%%)\s*(beginjs)\b'
        beginCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        end: '(%%)\s*(endjs)'
        endCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        patterns:
          - include: source.js
          - include: '#prototype'
      - comment: Embedded SVG
        name: meta.svg.abc
        begin: '(%%)\s*(beginsvg)\b'
        beginCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        end: '(%%)\s*(endsvg)'
        endCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        patterns:
          - include: text.xml
          - include: '#prototype'
      - comment: Embedded PostScript
        name: meta.ps.abc
        begin: '(%%)\s*(beginps)(\s+(?:nosvg))?\b'
        beginCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
          '3': {name: variable.parameter.directive.abc}
        end: '(%%)\s*(endps)'
        endCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        patterns:
          - include: source.postscript
          - include: '#prototype'
      - comment: Embedded Markdown
        begin: '(%%)\s*(beginmd)\b'
        beginCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        end: '(%%)\s*(endmd)'
        endCaptures:
          '1': {name: comment.line.percentage.abc}
          '2': {name: support.function.directive.abc}
        patterns:
          - include: text.html.markdown
          - include: '#prototype'
      - comment: Inline Postscript Instructions
        patterns:
          - name: meta.ps.abc
            begin: '(%%)\s*(postscript|ps)\b'
            beginCaptures:
              '1': {name: comment.line.percentage.abc}
              '2': {name: support.function.directive.abc}
            end: $
            patterns:
              - include: source.postscript
              - include: '#prototype'

  illegals:
    comment: Illegal Syntax
    patterns:
    - name: meta.code.illegal.abc
      match: ([\[]{2,}(?<!\|)(?!:))
      captures:
        '1': {name: invalid.illegal.barline.abc}
    - name: meta.code.illegal.abc
      match: ([\]](?!:)(?<![|\]]))
      captures:
        '1': {name: invalid.illegal.barline.abc}
    - name: meta.code.illegal.abc
      match: ([\[]{2,}(?!:))
      captures:
        '1': {name: invalid.illegal.barline.abc}
...
