# [PackageDev] target_format: plist, ext: tmLanguage
name: ABC Notation
scopeName: source.abc
fileTypes: [abc]
uuid: 431a5f26-5897-4146-8415-25a3c4b859c0

patterns:
- comment: ABC Tune
  name: meta.tune.abc
  begin: '^(X:)[ \t\v\f]*(\d+)'
  beginCaptures:
    '1': {name: keyword.control.index.abc}
    '2': {name: constant.numeric.index.abc}
  end: '[ \t\v\f]' # End just before the first 'K:' field
  patterns:
  - include: '#inline-field'
  - include: '#inline-remark'
  - include: '#inline-instruction'
  - include: '#grace'
  - include: '#decoration'
  - include: '#decoration-symbol'
  - include: '#string-chord'
  - include: '#string-annotation'
  - include: '#abc-note'
  - include: '#abc-rest'
  - include: '#barline'
  - include: '#barline-repeat'
  - include: '#slur'
  - include: '#chord'
  - include: '#tuplet'
  - include: '#union'
  - include: '#macro'
  - include: '#backquote'
  - include: '#line-break'
  - include: '#line-continue'
  - include: '#field'
  - include: '#field-title'
  - include: '#field-remark'
  - include: '#field-instruction'
  - include: '#field-key'
  - include: '#field-index'
  - include: '#escape'
  - include: '#comments'
  - include: '#directive'

- include: '#field'

- include: '#field-remark'

- include: '#field-instruction'

- include: '#namespace'

- include: '#directive'

- include: '#comments'

repository:
  # Unparsed text matches for all text outside of an ABC tune or multi-line
  # block of embedded markup or code content.
  unparsed:
    name: meta.unparsed.abc
    begin: '^[ \t\v\f]*$'
    beginCaptures:
      '1': {name: comment.block.free-text.abc}
    end: '^[ \t\v\f]*$'

## Global Elements
  escape:
    name: constant.character.escape.abc
    match: (?:\\%)|(?:\\\\)|(?:\\u\h{4})|(?:\\[[:punct:]&&[\w]&&[^[ \t\v\f]]]{2})|(?:&\w+;)|(?:&#\d+;)|(?:&#x\h+;)
  namespace:
    comment: Namespace
    name: meta.namespace.abc
    match: '(%)(abc(?:-\d\.\d)?)'
    captures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: entity.name.namespace.abc}
  directive:
    comment: Directives
    name: meta.directive.abc
    match: '(%%)[ \t\v\f]*(\w*)([^%\n\r]*)'
    captures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
      '3': {name: variable.parameter.directive.abc}
    patterns:
    - include: '#text-directive'
    - include: '#svg-directive'
    - include: '#postscript-directive'
    - include: '#js-directive'
  comments:
    comment: Comments
    name: comment.line.percentage.abc
    match: '%(?!%|abc).*'

  field:
    comment: Fields
    name: meta.code.field.abc
    match: ^([[:alpha:]&&[^IKTXr]]:)([^%\\]*)
    captures:
      '1': {name: entity.name.function.field.abc}
      '2': {name: string.unquoted.field.abc}
  field-remark:
    comment: Remark Field
    name: meta.code.field.remark.abc
    match: ^(r:)([^%\\]*)
    captures:
      '1': {name: entity.name.function.field.remark.abc}
      '2': {name: comment.block.remark.abc}
  field-instruction:
    comment: Instruction Field
    name: meta.code.field.instruction.abc
    match: ^(I:)[ \t\v\f]*(\w+)[ \t\v\f]+([^%\n\r]*)
    captures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: keyword.operator.word.instruction.abc}
      '3': {name: variable.parameter.instruction.abc}
    patterns:
    - include: '#spacing-length'
    - include: '#text-instruction'
    - include: '#svg-instruction'
    - include: '#postscript-instruction'
    - include: '#js-instruction'

  field-index:
    comment: Index Field
    name: meta.code.field.index.abc
    match: '^(X:)[ \t\v\f]*(\d+)'
    captures:
    '1': {name: keyword.control.index.abc}
    '2': {name: constant.numeric.index.abc}
  field-title:
    comment: Title Field
    name: meta.code.field.title.abc
    match: ^(T:)([^%\\]*)
    captures:
      '1': {name: entity.name.function.field.abc}
      '2': {name: markup.heading.title.abc}
  field-key:
    comment: Key Field
    name: meta.code.field.key.abc
    match: ^(K:)[ \t\v\f]*([^%\\]+)
    captures:
      '1': {name: keyword.control.key.abc}
      '2': {name: string.unquoted.key.abc}

  spacing-length:
    name: constant.numeric.float.spacing-length.abc
    match: (\d*(?:\.\d*)?(?:pt|in|cm)?\b)

## ABC Tune Body
  # This pattern is not used, but is available to
  # be matched by plugins.
  tune-body:
    comment: Tune Body
    name: meta.tune.body.abc
    begin: ^(K:)[ \t\v\f]*([^%\\]+)
    beginCaptures:
      '1': {name: keyword.control.key.abc}
      '2': {name: string.unquoted.key.abc}
    end: '^[ \t\v\f]*$'
    patterns:
    - include: '#inline-field'
    - include: '#inline-remark'
    - include: '#inline-instruction'
    - include: '#grace'
    - include: '#decoration'
    - include: '#decoration-symbol'
    - include: '#string-chord'
    - include: '#string-annotation'
    - include: '#abc-note'
    - include: '#abc-rest'
    - include: '#barline'
    - include: '#barline-repeat'
    - include: '#slur'
    - include: '#chord'
    - include: '#tuplet'
    - include: '#union'
    - include: '#macro'
    - include: '#backquote'
    - include: '#line-break'
    - include: '#line-continue'

## ABC Code Elements
  # Inline Fields
  inline-field:
    comment: Inline Fields
    name: meta.code.inline-field.abc
    contentName: string.unquoted.inline-field.abc
    begin: (\[[[:alpha:]&&[^IKXr]]:)
    beginCaptures:
      '1': {name: entity.name.function.inline-field.abc}
    end: (\])
    endCaptures:
      '1': {name: entity.name.function.inline-field.abc}
  inline-remark:
    comment: Inline Remark Field
    name: meta.code.inline-field.remark.abc
    contentName: comment.block.remark.abc
    begin: (\[r:)
    beginCaptures:
      '1': {name: entity.name.function.inline-field.remark.abc}
    end: (\])
    endCaptures:
      '1': {name: entity.name.function.inline-field.remark.abc}
  inline-instruction:
    comment: Inline Instruction Field
    name: meta.field.instruction.abc
    contentName: variable.parameter.instruction.abc
    begin: (\[I:)[ \t\v\f]*(\w+)
    beginCaptures:
      '1': {name: entity.name.function.inline-field.abc}
      '2': {name: keyword.operator.word.instruction.abc}
    end: (\])
    endCaptures:
      '1': {name: entity.name.function.inline-field.abc}
    patterns:
    - include: '#spacing-length'

  # ABC Note Constructs
  grace:
    comment: Grace Notes
    name: meta.code.grace.abc
    begin: (\{\/?)
    beginCaptures:
      '1': {name: support.type.grace.abc}
    end: (\})
    endCaptures:
      '1': {name: support.type.grace.abc}
    patterns:
    - include: '#note'
    - include: '#note-length'
    - include: '#rest'
    - include: '#decoration'
    - include: '#decoration-symbol'
  decoration:
    comment: Decorations
    name: meta.code.decoration.abc
    match: '(!)([[:alpha:]&&[^ \t\v\f!]]*)(!)'
    captures:
      '1': {name: keyword.operator.decoration.abc}
      '2': {name: entity.name.trait.decoration.abc}
      '3': {name: keyword.operator.decoration.abc}
  decoration-symbol:
    comment: Decoration Symbols
    name: meta.code.decoration.symbol.abc
    match: ([-.~HLMOPSTuv])
    captures:
      '1': {name: entity.name.trait.decoration.symbol.abc}
  abc-note:
    comment: Note Values (Accidentals, Pitch, Note Length)
    name: meta.code.note.abc
    match: ([_\^]{2}|=|[_=\^](?:\d*\/*(?:\d*)?)|(?:\d(?!\.))+)?([A-Ga-g][,']*)((?:\d*/*(?:\d*)?)|(?:\d*>*(?:\d*)?)|(?:\d*<*(?:\d*)?)|(?:[<\/>]+)|(?:\d(?!\.))+)
    captures:
      '1': {name: constant.language.accidental.abc}
      '2': {name: constant.character.note.abc}
      '3': {name: constant.numeric.note-length.abc}
  accidental:
    comment: Accidentals
    name: meta.code.accidental.abc
    match: ([_\^]{2}|=|[_=\^](?:\d*/*(?:\d*)?)|(?:\d(?!\.))+)
    captures:
      '1': {name: constant.language.accidental.abc}
  note:
    comment: Pitch Value
    name: meta.code.note.abc
    match: ([A-Ga-g][,']*)
    captures:
      '1': {name: constant.character.note.abc}
  note-length:
    comment: Note Lengths
    name: meta.code.note-length.abc
    match: ((?:\d*/*(?:\d*)?)|(?:\d*>*(?:\d*)?)|(?:\d*<*(?:\d*)?)|(?:\d(?!\.))+)
    captures:
      '1': {name: constant.numeric.note-length.abc}
  string-chord:
    comment: Chord symbols
    name: meta.code.string.chord.abc
    begin: (\"(?![_<>^@]))
    beginCaptures:
      '1': {name: punctuation.definition.string.chord.begin.abc}
    contentName: string.quoted.double.chord.abc
    end: (\")
    endCaptures:
      '1': {name: punctuation.definition.string.chord.end.abc}
  string-annotation:
    comment: String annotations
    name: meta.code.string.annotation.abc
    begin: (\"[_<>^@])
    beginCaptures:
      '1': {name: punctuation.definition.string.annotation.begin.abc}
    contentName: string.quoted.double.annotation.abc
    end: (\")
    endCaptures:
      '1': {name: punctuation.definition.string.annotation.end.abc}

  # Rests
  abc-rest:
    comment: Rests
    name: meta.code.abc-rest.abc
    match: ([xz])((?:\d*\/*(?:\d*)?)|(?:\d*>*(?:\d*)?)|(?:\d*<*(?:\d*)?))?|([XZ])(\d*)?
    captures:
      '1': {name: storage.type.abc-rest.abc} # constant.character.rest.abc
      '2': {name: constant.numeric.rest-length.abc}
  rest:
    comment: Simple Rest
    name: meta.code.rest.abc
    match: ([xz])((?:\d*\/*(?:\d*)?)|(?:\d*>*(?:\d*)?)|(?:\d*<*(?:\d*)?))?
    captures:
      '1': {name: storage.type.rest.abc} # constant.character.rest.abc
      '2': {name: constant.numeric.rest-length.abc}
  multi-rest:
    comment: Multi-measure Rest
    name: meta.code.rest.multi.abc
    match: ([XZ])(\d*)?
    captures:
      '1': {name: storage.type.rest.multi.abc} # constant.character.rest.abc
      '2': {name: constant.numeric.rest-length.abc}

  # Barlines
  ## NOTE: Repeat section barlines act as a catch-all for any stray `]`,
  ## to prevent being matched as the end of a chord.
  barline:
    comment: Bar lines
    name: meta.code.barline.abc
    match: ([:|\[\]]*\|[:|\[\]]*)([1-9](?:[-,][1-9])*)?
    captures:
      '1': {name: keyword.operator.barline.abc}
      '2': {name: support.type.numeric.barline.abc}
  barline-repeat:
    comment: Repeat Section Bar Lines
    name: meta.code.barline.abc
    match: ([:|\[\]]*[|\[\]][\[\]]?)([1-9](?:[-,][1-9])*)
    captures:
      '1': {name: keyword.operator.barline.abc}
      '2': {name: support.type.numeric.barline.abc}

  # Slurs and Chords
  slur:
    comment: Slurs
    name: meta.code.slur.abc
    begin: (\((?![\d!:]))
    beginCaptures:
      '1': {name: support.type.slur.abc}
    end: (\)(?!\!))
    endCaptures:
      '1': {name: support.type.slur.abc}
    patterns:
    - include: '#grace'
    - include: '#abc-note'
    - include: '#abc-rest'
    - include: '#decoration'
    - include: '#string-chord'
    - include: '#string-annotation'
    - include: '#barline'
    - include: '#barline-repeat'
    - include: '#macro'
    - include: '#tuplet'
    - include: '#union'
    - include: '#backquote'
    - include: '#chord'
    - include: '#slur'
  chord:
    comment: Chords
    name: meta.code.chord.abc
    begin: (\[)(?![|:\d])
    beginCaptures:
      '1': {name: support.type.chord.abc}
    end: (\])
    endCaptures:
      '2': {name: support.type.chord.abc}
    patterns:
    - include: '#abc-note'
    - include: '#abc-rest'
    - include: '#decoration'
    - include: '#decoration-symbol'
    - include: '#macro'
    - include: '#union'
    - include: '#backquote'
    - include: '#slur'

  # Operators
  tuplet:
    comment: Tuplets
    name: meta.code.tuplet.abc
    match: (\(\d+(?::\d*(?::\d*)?)?)
    captures:
      '1': {name: support.type.tuplet.abc}
  union:
    comment: Union Operators
    name: meta.code.union.abc
    match: (\(\&|\&\&?|\&\))
    captures:
      '1': {name: support.function.union.abc}
  macro:
    comment: User-defined Macro
    name: meta.code.macro.abc
    match: (~[a-zA-Z][a-zA-Z0-9]{1,31})
    captures:
      '1': {name: support.function.macro.abc}
  backquote:
    comment: Backquote (used for spacing between note sequences)
    name: meta.code.backquote.abc
    match: (`)
    captures:
      '1': {name: support.constant.backquote.abc}

  line-break:
    comment: Line Break
    name: meta.code.line-break.abc
    match: (\$(?= ) +)
    captures:
      '1': {name: support.constant.line-break.abc}
  line-continue:
    comment: Line Continue
    name: meta.code.line-continue.abc
    match: (\\(?= ) )
    captures:
      '1': {name: support.constant.line-continue.abc}

## Embedded Syntaxes
  text-directive:
    name: meta.text.directive.abc
    contentName: string.unquoted.free.abc
    begin: ^(%%)[ \t\v\f]*(begintext)[ \t\v\f]+(obeylines|fill|ragged|justify|align|skip)?
    beginCaptures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
      '3': {name: variable.parameter.directive.abc}
    end: ^(%%)[ \t\v\f]*(endtext)[ \t\v\f]*
    endCaptures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
    patterns:
    - include: '#comments'
    - include: '#directive'
  text-instruction:
    name: meta.text.instruction.abc
    contentName: string.unquoted.free.abc
    begin: ^(I:)[ \t\v\f]*(begintext)[ \t\v\f]+(obeylines|fill|ragged|justify|align|skip)?
    beginCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: support.function.directive.abc}
      '3': {name: variable.parameter.directive.abc}
    end: ^(I:)[ \t\v\f]*(endtext)[ \t\v\f]*\n
    endCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: support.function.directive.abc}
    patterns:
    - include: '#comments'
    - include: '#directive'
  svg-directive:
    name: meta.svg.directive.abc
    contentName: source.xml
    begin: (%%)[ \t\v\f]*(beginsvg)
    beginCaptures:
      '1': {name: punctuation.definition.comment.pseudo.abc}
      '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
    end: (%%)[ \t\v\f]*(endsvg)
    endCaptures:
      '1': {name: punctuation.definition.comment.pseudo.abc}
      '2': {name: variable.function.abc punctuation.definition.sequence.end.abc}
    patterns:
    - include: '#_escape'
    - include: '#abc-comment'
    - include: '#_directive'
  svg-instruction:
    name: meta.svg.instruction.abc
    contentName: source.xml
    begin: (^I:)[ \t\v\f]*(beginsvg)
    beginCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
    end: (^I:)[ \t\v\f]*(endsvg)
    endCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
    patterns:
    - include: '#comment'
    - include: '#directive'
  postscript-directive:
    name: meta.ps.directive.abc
    contentName: source.ps
    begin: (%%)[ \t\v\f]*(beginps)[ \t\v\f]+(nosvg)?
    beginCaptures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
      '3': {name: variable.parameter.directive.abc}
    end: (%%)[ \t\v\f]*(endps)
    endCaptures:
      '1': {name: punctuation.definition.comment.pseudo.abc}
      '2': {name: support.function.directive.abc}
  postscript-instruction:
    name: meta.ps.instruction.abc
    contentName: source.ps
    begin: (^I:)[ \t\v\f]*(beginps)[ \t\v\f]+(nosvg)?
    beginCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: support.function.directive.abc}
      '3': {name: variable.parameter.directive.abc}
    end: ^(I:)[ \t\v\f]*(endps)
    endCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: support.function.directive.abc}
    patterns:
    - include: '#comments'
    - include: '#directive'
  js-directive:
    name: meta.js.directive.abc
    contentName: source.javascript
    begin: (%%)[ \t\v\f]*(beginjs)
    beginCaptures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
    end: (%%)[ \t\v\f]*(endjs)
    endCaptures:
      '1': {name: comment.line.percentage.abc}
      '2': {name: support.function.directive.abc}
    patterns:
    - include: '#comments'
    - include: '#directive'
  js-instruction:
    name: meta.js.instruction.abc
    contentName: source.javascript
    begin: (^I:)[ \t\v\f]*(beginjs)
    beginCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: support.function.directive.abc}
    end: ^(I:)[ \t\v\f]*(endjs)
    endCaptures:
      '1': {name: support.constant.instruction.abc}
      '2': {name: support.function.directive.abc}
    patterns:
    - include: '#comments'
    - include: '#directive'
