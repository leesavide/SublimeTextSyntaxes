%YAML 1.2
---
# http://abcnotation.com/wiki/abc:standard:v2.2
name: ABC Notation
comment: |-
  This was originally based on https://github.com/jimhawkridge/SublimeABC/,
  but later outgrew the limits that PackageDev imposes on tmLanguage files.
file_extensions:
  - abc
  - abh
  - abp
first_line_match: ^%abc(?:-\d\.\d)?
scope: source.abc
variables:
  accidental: '([_=\^](?:\d*\/*\d*)|=|[_\^]{2})'
  note: "([A-Ga-g][,']*)"
  note_length: '(\d*[<>/]*\d*)'
  field_value: '[^%\n\r]'
  key_value: '[^% \n\r]'

contexts:
  prototype:
    # escape characters
    - include: escape
    # fields
    - include: fields
    # comments, directives, namespace comments, remark fields
    - include: comments

  comments:
    # line comments
    - match: '(?:^\s*)?(?>%(?!%|abc))'
      scope: comment.line.percentage.abc punctuation.definition.comment.abc
      push:
        - meta_content_scope: comment.line.percentage.abc
        - match: $
          pop: true
    # directives and pseudo-comment
    - include: directive
    # namespace comment
    - match: '(?:^\s*)?(?>(%)(abc(?:-\d\.\d)?))'
      scope: comment.line.namespace.abc
      captures:
        1: punctuation.definition.comment.abc
        2: keyword.other.special-method.namespace.abc
    # remark field
    - match: '^(r:)'
      scope: meta.field.remark.abc
      captures:
        1: support.function.field.remark.abc
      push:
        - meta_scope: meta.field.remark.abc
        - match: '{{field_value}}*'
          scope: comment.line.remark.abc
        - match: $
          pop: true

  fields:
    - include: instruction-field
    # info fields
    - match: '^((?>[[:alpha:]+&&[^IKPVTXr]]:))'
      scope: meta.field.abc
      captures:
        1: support.function.field.abc
      push:
        - meta_content_scope: meta.field.abc
        - include: escape
        - include: comments
        - match: '{{field_value}}*'
          scope: string.unquoted.field.abc
        - match: $
          pop: true
    # voice field
    - match: '^((?>V:))'
      scope: meta.field.voice.abc
      captures:
        1: entity.name.tag.voice.abc
      push:
        - meta_scope: meta.field.voice.abc
        - include: escape
        - include: comments
        - match: '\s*({{field_value}}+)'
          captures:
            1: variable.parameter.voice.abc
        - match: $
          pop: true
    # part field
    - match: '^((?>P:))'
      captures:
        1: entity.name.tag.part.abc
      push:
        - meta_scope: meta.field.part.abc
        - meta_content_scope: variable.parameter.part.abc
        - include: escape
        - include: comments
        - match: $
          pop: true

  key-field:
    - match: '^(?>(K:)\s*\b({{key_value}}+)?\b *({{field_value}}*)?)'
      captures:
        1: entity.name.tag.part.abc
        2: variable.parameter.key.abc
        3: string.unquoted.key.abc
      push:
        - meta_scope: meta.field.key.abc
        - meta_content_scope: string.unquoted.key.abc
        - match: $
          pop: true

  title-field:
    - match: '^((?>T:))'
      captures:
        1: entity.name.tag.title.abc
      push:
        - meta_scope: meta.field.title.abc
        - match: '\s*({{field_value}}+)'
          captures:
            1: string.unquoted.title.abc
        - match: $
          pop: true

  escape:
    - scope: constant.character.escape.abc
      match: (\\(?:\\|%|[^ \n\r]|u\h{4}|u\h{8}|\\[[:punct:]&&[\w]&&[^[ \t\v\f]]]{2}))
    - scope: constant.character.escape.abc
      match: '(?:&\w+;)'
    - scope: constant.character.escape.abc
      match: '(?:&#\d+;)'
    - scope: constant.character.escape.abc
      match: '(?:&#x\h+;)'

  # Start of ABC Notation
  main:
    # abc tunes
    - match: '^(X:)\s*(\d+)'
      scope: meta.field.index.abc
      captures:
        1: entity.name.tag.index.abc
        2: variable.parameter.index.abc
      push: abc-tune

  abc-tune:
    - meta_scope: meta.tune.abc
    - include: title-field
    # tune-body begins on finding the first 'K:' field to the next blank line.
    - match: '^(?>(K:)\s*\b({{key_value}}+)?\b *({{field_value}}*)?)'
      scope: meta.field.key.head.abc
      captures:
        1: entity.name.tag.part.abc
        2: variable.parameter.key.abc
        3: string.unquoted.key.abc
      # TODO: Capture clef variable keywords within key field
      set:
        - meta_content_scope: meta.tune.abc
        - include: title-field
        - include: key-field
        - include: barline
        - include: inline-field
        - include: abc-chord
        - include: abc-note
        - include: abc-rest
        - include: abc-space
        - include: grace
        - include: decoration
        - include: macro
        - include: strings
        - include: operators
        - match: '^(\s*)?$'
          pop: true
    - match: '^(\s*)?$'
      pop: true

  abc-note:
    - match: |-
        (?x)
          {{accidental}}?
          {{note}}
          {{note_length}}?
      captures:
        1: constant.language.accidental.abc
        2: constant.character.note.abc
        3: storage.type.note-length.abc

  abc-rest:
    - scope: meta.code.abc-rest.abc
      match: '([XZ])(\d+)?'
      captures:
        1: storage.type.abc-rest.abc
        2: storage.type.rest-length.abc
    - scope: meta.code.abc-rest.abc
      match: |-
        (?x)
          ([xz])
          ((?:\d*\/*(?:\d*)?)|
           (?:\d*>*(?:\d*)?)|
           (?:\d*<*(?:\d*)?))?
      captures:
        1: storage.type.abc-rest.abc
        2: storage.type.rest-length.abc

  abc-space:
    - scope: meta.code.abc-space.abc
      match: |-
        (?x)
          ([yY])
          (\d+(?:\.\d*(?:pt|in|cm)?)?)?
      captures:
        1: storage.type.spacer.abc
        2: constant.numeric.space-length.abc

  decoration:
    - scope: variable.language.decoration.abc
      match: '(?:^\s*)?([HLMOPSTuv](?!:))'
    - scope: variable.language.decoration.abc
      match: '(!\w+!)'
    - scope: variable.language.decoration.abc
      match: |-
        (?x)
          (\!(?:
              \+|\-\(|\-\)|\/{1,3}|[0-5]|\<\(|\<\)|\<|\>\(|\>\)|\>|\^|
              accent|arpeggio|beam-accel|beam-rall|beambr[12]|beamon|
              breath|coda|courtesy|crescendo|crescendo\(|crescendo\)|
              D\.C\.(?:alcoda|alfine)?|D\.S\.(?:alcoda|alfine)?|
              dacapo|dacoda|diminuendo|diminuendo\(|diminuendo\)|
              dot|downbow|editorial|emphasis|f+|fermata|fine|gmark|
              invertedfermata|invertedturn|invertedturnx|invisible|
              longphrase|lowermordent|marcato|mediumphrase|mf|mordent|
              mp|open|p+|plus|pralltriller|rbend|rbstop|roll|segno|sfz|
              shortphrase|slide|snap|stemless|tenuto|thumb|
              trem[1-4]|trill|trill\(|trill\)|turn|turnx|upbow|uppermordent|wedge|
              xstem|\~\(|\~\))\!)
    # excludes matching '~' from macros in tune
    - scope: variable.language.decoration.abc
      match: (~(?![h-wH-W][a-zA-Z0-9]*))

  macro:
    - match: '(\~[h-zH-Z][a-zA-Z0-9]{,30})'
      scope: support.type.macro.abc

  grace:
    - scope: meta.code.grace.abc
      match: '(\{/?)'
      captures:
        1: support.type.grace.abc
      push:
        - match: ([A-Ga-g][,']*)
          scope: constant.character.note.abc
        - match: (\d*[<>/]*\d*)?
          scope: storage.type.note-length.abc
        - include: abc-rest
        - include: decoration
        - match: '(\})'
          captures:
            1: support.type.grace.abc
          pop: true

  operators:
    - match: (\(\&|\&\&?|\&\))
      scope: support.function.overlay.abc
    - match: (\\(?= *| *$))
      scope: support.function.line-continue.abc
    - match: ((?:\((?![\d:])[',]?)|\))
      scope: support.function.slur.abc
    - match: ([-\.`])
      scope: support.type.ties.abc
    - match: (\$(?= *| *$))
      scope: support.type.line-break.abc
    - match: (\(\d+(?::\d*(?::\d*)?)?)
      scope: support.type.tuplet.abc

  strings:
    - include: chord-symbol
    - include: annotation

  chord-symbol:
    - match: '("(?![_<>^@]))'
      scope: punctuation.definition.string.chord.begin.abc
      push:
        - meta_scope: string.quoted.double.chord.abc
        - meta_include_prototype: false
        - include: escape
        # TODO: Match for symbols in chord strings
        # (?x)
        #   ([A-G])
        #   ([b#♭♮♯])?
        #   (?>m(in)?|maj|dim|aug|sus|\d|\+)?
        #   (/[A-G])
        - match: '"'
          scope: punctuation.definition.string.chord.end.abc
          pop: true

  annotation:
    - match: '(\"[_<>^@])'
      scope: punctuation.definition.string.annotation.begin.abc
      push:
        - meta_content_scope: string.quoted.double.annotation.abc
        - meta_include_prototype: false
        - include: escape
        - match: '"'
          scope: punctuation.definition.string.annotation.end.abc
          pop: true

  # The following 3 contexts cover highlighting of directives,
  # instruction fields, & inline instruction fields.
  directive:
    - match: '((?>%%))\s*(\w*)\b'
      scope: meta.directive.abc comment.line.percentage.directive.abc
      captures:
        1: punctuation.definition.comment.abc
        2: keyword.operator.word.directive.abc
      push:
        - meta_content_scope: variable.parameter.directive.abc
        # MIDI keywords
        - scope: keyword.operator.word.directive.midi.abc
          match: |-
            (?x)
              (MIDI\b +
                (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|
                bend(?:velocity|string)|chord(?:attack|name|program)|
                control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|
                drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|
                gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|
                portamento|program|ptstress|randomchordattack|ratio|stressmodel|
                snt|rtranspose|temperament(?:linear|equal|normal)|transpose|
                trim|vol(inc)?)\b
        - scope: constant.numeric.float.length-unit.abc
          match: '(\d*(?:\.\d*)?(?:pt|in|cm)?)'
        - match: '(?i)\b(true|false|yes|no|on|off)\b'
          scope: storage.type.directive.abc
        # TODO: include more keywords to be highlighted
        - match: '\s*(?>%(?!%|abc))'
          scope: comment.line.percentage.abc punctuation.definition.comment.abc
          push:
            - meta_content_scope: comment.line.percentage.abc
            - match: $
              pop: true
        - match: $
          pop: true

  instruction-field:
    # instruction field
    - match: '^(?>(I:)\s*(\w+)\b)'
      captures:
        1: entity.name.tag.instruction.abc
        2: keyword.operator.word.directive.abc
      push:
        - meta_scope: meta.instruction.abc
        - meta_content_scope: variable.parameter.directive.abc
        - include: escape
        - include: comments
        # MIDI keywords
        - scope: keyword.operator.word.directive.midi.abc
          match: |-
            (?x)
              (MIDI\b +
                (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|
                bend(?:velocity|string)|chord(?:attack|name|program)|
                control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|
                drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|
                gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|
                portamento|program|ptstress|randomchordattack|ratio|stressmodel|
                snt|rtranspose|temperament(?:linear|equal|normal)|transpose|
                trim|vol(inc)?)\b
        - match: '(?i)\b(true|false|yes|no|on|off)\b'
          scope: storage.type.directive.abc
        - scope: constant.numeric.float.length-unit.abc
          match: '(\d*(?:\.\d*)?(?:pt|in|cm)?)'
        - match: $
          pop: true

  inline-instruction:
    - match: ((?>\[I:)\s*(\w+)\b)
      captures:
        1: entity.name.tag.inline-field.instruction.abc
        2: keyword.operator.word.instruction.abc
      push:
        - meta_scope: meta.inline-field.instruction.abc
        - meta_content_scope: variable.parameter.instruction.abc
        - meta_include_prototype: false
        - include: escape
        # MIDI keywords
        - scope: keyword.operator.word.directive.midi.abc
          match: |-
            (?x)
              (MIDI\b +
                (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|
                bend(?:velocity|string)|chord(?:attack|name|program)|
                control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|
                drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|
                gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|
                portamento|program|ptstress|randomchordattack|ratio|stressmodel|
                snt|rtranspose|temperament(?:linear|equal|normal)|transpose|
                trim|vol(inc)?)\b
        - match: '(?i)\b(true|false|yes|no|on|off)\b'
          scope: storage.type.directive.abc
        - scope: constant.numeric.float.length-unit.abc
          match: '(\d*(?:\.\d*)?(?:pt|in|cm)?)'
        - match: \s*((?>\]))
          captures:
            1: entity.name.tag.inline-field.instruction.abc
          pop: true

  # The following 3 contexts are defined in a way that
  # permits syntax highlighting that obeys how ABC notation is meant
  # to behave. By precedence, the '[' symbol will match as a barline first,
  # the beginning of a chord sequence second, and as the start of an
  # inline field last, since inline fields are more explicit in grammar
  # compared to finding a barline or chord sequence, which often can end
  # up being put next to each other in an ABC Notation file.
  # Any changes made to these contexts should only be done so under strict
  # review, and with good reason.
  barline:
    - scope: meta.barline.invisible.abc
      match: '((?>\[\|\]|\[\]))((?>\d+(?:[,-]\d+)*))?'
      captures:
        1: comment.block.documentation.barline.abc
        2: comment.block.documentation.barline.repeat-length.abc
    - scope: meta.barline.abc
      match: '((?>:+))'
      captures:
        1: punctuation.separator.barline.abc
    - scope: meta.barline.abc
      match: '(\[\[)'
      captures:
        1: punctuation.separator.barline.abc
    - scope: meta.barline.abc
      match: ((?>[\[\|\]]:+))
      captures:
        1: punctuation.separator.barline.abc
    - scope: meta.barline.abc
      match: '((?>:*\|+))((?>\d+(?:[,-]\d+)*))?'
      captures:
        1: punctuation.separator.barline.abc
        2: punctuation.separator.barline.repeat-length.abc
    - scope: meta.barline.abc
      match: '((?>:*\]+))((?>\d+(?:[,-]\d+)*))?'
      captures:
        1: punctuation.separator.barline.abc
        2: punctuation.separator.barline.repeat-length.abc
    - scope: meta.barline.abc
      match: '((?>:*\[+(?![a-zA-Z]:|[^\[\s\r\n:\d\|\]])))((?>\d+(?:[,-]\d+)*))?'
      captures:
        1: punctuation.separator.barline.abc
        2: punctuation.separator.barline.repeat-length.abc

  abc-chord:
    # an ABC chord sequence cannot include spaces or new lines,
    # and cannot match a barline or the start of an inline field.
    - match: |
        (?x)
          (\[
            (?![\[\|\]<>/\d\r\n\s]|(?:[a-zA-Z]:))
          )
      captures:
        1: support.type.decoration.chord.abc
      push:
        - meta_scope: meta.chord.abc
        # spaces are not permitted in chord sequences
        - match: '([\s\r\n\[\|]\])'
          captures:
            1: invalid.illegal.chord.abc
          pop: true
        - include: abc-note
        - include: abc-rest
        - include: abc-space
        - include: decoration
        - include: macro
        - include: operators
        - match: '(\](?<![:\|]))({{note_length}})?'
          captures:
            1: support.type.decoration.chord.abc
            2: storage.type.note-length.abc
          pop: true

  inline-field:
    - include: inline-instruction
    - match: ((?>\[[[:alpha:]&&[^IKPVXr]]:))\s*
      captures:
        1: support.function.inline-field.abc
      push:
        - meta_scope: meta.inline-field.abc
        - meta_content_scope: string.unquoted.inline-field.abc
        - meta_include_prototype: false
        - include: escape
        - match: \s*((?>\]))
          captures:
            1: support.function.inline-field.abc
          pop: true
    - match: ((?>\[r:))\s*
      captures:
        1: support.function.inline-field.remark.abc
      push:
        - meta_scope: meta.inline-field.remark.abc
        - meta_content_scope: comment.block.remark.abc
        - meta_include_prototype: false
        - include: escape
        - match: \s*((?>\]))
          captures:
            1: support.function.inline-field.remark.abc
          pop: true
    - match: ((?>\[V:))\s*
      captures:
        1: entity.name.tag.inline-field.voice.abc
      push:
        - meta_scope: meta.inline-field.voice.abc
        - meta_content_scope: variable.parameter.voice.abc
        - meta_include_prototype: false
        - include: escape
        - match: \s*((?>\]))
          captures:
            1: entity.name.tag.inline-field.voice.abc
          pop: true
    - match: ((?>\[P:))\s*
      captures:
        1: entity.name.tag.inline-field.part.abc
      push:
        - meta_scope: meta.inline-field.part.abc
        - meta_content_scope: meta.inline-field.part.abc variable.parameter.part.abc
        - meta_include_prototype: false
        - include: escape
        - match: \s*((?>\]))
          captures:
            1: entity.name.tag.inline-field.part.abc
          pop: true
    - match: ((?>\[T:))\s*
      captures:
        1: entity.name.tag.inline-field.title.abc
      push:
        - meta_scope: meta.inline-field.title.abc
        - meta_content_scope: string.unquoted.title.abc
        - meta_include_prototype: false
        - include: escape
        - match: \s*((?>\]))
          captures:
            1: entity.name.tag.inline-field.title.abc
          pop: true
    - match: ((?>\[K:)\s*\b({{key_value}}+)?\b)
      captures:
        1: entity.name.tag.part.abc
        2: variable.parameter.key.abc
      push:
        - meta_scope: meta.inline-field.key.abc
        - meta_content_scope: string.unquoted.key.abc
        - meta_include_prototype: false
        - include: escape
        - match: \s*((?>\]))
          captures:
            1: entity.name.tag.inline-field.key.abc
          pop: true
