# [PackageDev] target_format: plist, ext: tmLanguage
---
fileTypes: [abc]
name: ABC Notation
scopeName: source.abc
uuid: 431a5f26-5897-4146-8415-25a3c4b859c0
patterns:
# Include unparsed text as unquoted string content
- include: '#unparsed-text'

# Include free text and ABC tunes as the definitive blocks of ABC notation code
- include: '#free-text'
- include: '#abc-tune'

# Ensure comments, fields, and directives are top-level matches
- include: '#field'
- include: '#comment'
- include: '#directive'

repository:
# 1. Global Matches
  # Comments
  abc-comment:
    - name: comment.line.abc
      match: '\s*((?<!\\)%{1})([^%\n\r].*)'
      captures:
        '1': {name: comment.line.percentage.abc punctuation.definition.comment.abc}
        '2': {name: comment.line.abc}
      patterns:
        - include: '#escape'

  # Pseudo-Comment Directives
  directive:
    name: meta.directive.abc
    match: '((?<!\\)%{2}\s*\b\w+\b)\s+(.*)'  
    captures:
      '1': {name: keyword.control.directive.abc punctuation.definition.keyword.abc}
      '2': {name: variable.parameter.directive.abc}
    patterns:
    - include: '#escape'
    #- include: '#string-param'
    #- include: '#boolean-param'
    #- include: '#unit-param'
    #- include: '#numeric-param'

# 2. Content Matches
  # All unmatched text
  # This can include escapes, comments, & directives in it's scope,
  # despite being 'unparsed' text. Ends on the next immediate blank line.
  unparsed-text:
    - name: meta.unparsed-text.abc
      begin: (?!(^\s*\r?\n).*)
      contentName: string.unquoted.unparsed.abc
      end: (\r?\n\s*\r?\n)
      patterns:
        - include: '#escape'
        - include: '#comment'
        - include: '#directive'

  # Free Text
  free-text:
    - name: meta.free-text.abc
      begin: (%%)\s*(begintext)\s+(obeylines|fill|ragged|justify|align|skip)?
      beginCaptures:
        '1': {name: keyword.control.directive.abc punctuation.definition.keyword.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
        '3': {name: variable.parameter.abc}
      contentName: string.unquoted.free.abc
      end: (%%)\s*(endtext)
      endCaptures:
        '1': {name: keyword.control.directive.abc punctuation.definition.keyword.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.end.abc}
      patterns:
      - include: '#comment'
      - include: '#directive'
      - include: '#escape'

  embedded-svg:
    - name: meta.block.svg.abc
      begin: (%%)\s*(beginsvg)
      beginCaptures:
        '1': {name: keyword.operator.directive.abc punctuation.definition.keyword.abc punctuation.definition.sequence.begin.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      contentName: source.xml
      end: (%%)\s*(endsvg)
      endCaptures:
        '1': {name: keyword.operator.directive.abc punctuation.definition.keyword.abc punctuation.definition.sequence.end.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.end.abc}
      patterns:
        - include: '#escape'
        - include: '#comment'
        - include: '#directive'
    - name: meta.block.svg.abc
      begin: (^I:)\s*(beginsvg)
      beginCaptures:
        '1': {name: keyword.control.abc}
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      contentName: source.xml
      end: (^I:)(endsvg)
      endCaptures:
        '1': {name: keyword.control.abc }
        '2': {name: variable.function.abc punctuation.definition.sequence.begin.abc}
      patterns:
        - include: '#escape'
        - include: '#comment'
        - include: '#directive'

  embedded-html:
    - name: meta.block.html.abc
      begin: ()()

  # ABC Tune
  abc-tune:
    begin: ^(X:)\s*(?=\d+)
    beginCaptures:
      '1': {name: }
      '2': {name: constant.numeric.integer.abc}
    contentName: meta.tune.abc
    end: \r?\n\s*\r?\n
    patterns:
    - include: '#tune-header'
    - include: '#tune-body'
    - include: '#free-text'

# 3. Child Content Matches
  # Literal Character Escapes, ABC Ligatures, ABC Accents, & HTML / XML Entities
  escape:
  - name: constant.character.escape.abc
    match: (\\%|\\\\|\\u\h{4}|\\[[:punct:]\w]{2})
  - name: constant.character.escape.abc
    match: (&\w+;|&#\d+;|&#x\h+;)

  # Information Fields
  field:
  - name: meta.field.remark.line.abc
    match: '(^r:)([^%\r\n]*)'
    captures:
      '1': {name: punctuation.definition.comment.abc}
      '2': {name: comment.line.abc}
    patterns:
      - include: '#escape'
      - name: comment.line.percentage.abc
        match: '[ \t]*((?<!\\)%{1})([^%\n\r].*)'
        captures:
          '1': {name: comment.line.percentage.abc punctuation.definition.comment.abc}
          '2': {name: comment.line.abc}
      - include: '#directive'
  - name: meta.field.remark.inline.abc
    begin: '(\[r:)'
    beginCaptures:
      '1': {name:  punctuation.section.brackets.begin.abc punctuation.definition.comment.abc}
    contentName: comment.block.documentation.abc
    end: '((?<!\\)\])'
    endCaptures:
      '1': {name: punctuation.section.brackets.end.abc punctuation.definition.comment.abc}
  - name: meta.field.line.abc
    match: '^([A-HL-WZa-qs-z]:)(.*)'
    captures:
      '1': {name: entity.name.function.abc punctuation.separator.continuation.abc}
      '2': {name: variable.parameter.abc}
    patterns:
      - include: '#escapes'
      - include: '#comments'
      - include: '#directive'
  # Field Continuation
  - name: meta.field.line.continue.abc
    match: (^+:)(.*)
    captures:
      '1': {name: entity.name.function.abc punctuation.separator.continuation.abc}
      '2': {name: variable.parameter.abc}
    patterns:
      - include: '#escapes'
      - include: '#comments'
      - include: '#directive'
  # Directive Fields
  - name: meta.field.instruction.abc
    match: '(^I:)\s*(\w+)\s+(.*)'
    captures:
      '1': {name: entity.name.function.abc punctuation.separator.continuation.abc}
      '2': {name: support.type.instruction.abc}
      '3': {name: variable.parameter.instruction.abc}
    patterns:
      - include: '#escapes'
      - include: '#comments'
      - include: '#directives'
  # Key Fields
  - name: meta.field.key.abc
    match: '(^K:)\s*(.*)'
    captures:
      '1': {name: entity.name.function.abc punctuation.separator.continuation.abc}
      '2': {name: support.constant.key.abc}
    patterns:
      - include: '#comments'
      - include: '#directive'
  # Tune Index Fields
  - name: meta.field.index.abc
    match: '(^X:)\s*(\d+)'
    captures:
      '1': {name: keyword.control.abc punctuation.definition.keyword.abc}
      '2': {name: meta.toc-list.index.abc constant.numeric.integer.abc}
    patterns:
      - include: '#comments'
      - include: '#directive'

  continuations:
    - name: keyword.operator.abc punctuation.separator.continuation.abc
      match: '\s*(\\(?=\s+))'

  # Tune Body Elements
  inline-fields:
    # Inline Fields
    - name: meta.field.inline.abc
      begin: '(\[[A-HL-WZa-qs-z]:)'
      beginCaptures:
        '1': {name: entity.name.function.abc}
      contentName: variable.parameter.abc
      end: '(\])'
      endCaptures:
        '1': {name: entity.name.function.abc}
    - begin: '(\[I:)(\w+)\s+'
      beginCaptures:
        '1': {name: entity.name.function.abc}
        '2': {name: support.type.instruction.abc}
      contentName: variable.parameter.abc
      end: '(\])'
      endCaptures:
        '1': {name: support.type.abc}
      patterns:
        - include: '#escapes'

  bar-lines:
    match: '((?:\.?\|\|?|:*\|\]|\[\|:*|::|:+\||\|:+|\.?\||\[\|\])[1-9]?|(?::*\|[1-9](?:[-,][1-9])*))'
    name: meta.code.barline.abc
    captures:
      '1': {name: keyword.operator.abc}

  abc-notes:
    match: ([_^]{1,2}(?:3\/2|\/)?|=)?([A-Ga-gz][,']*)((?:[1-9]\d*/*(?:[1-9]\d*)?)|(?:[1-9]\d*>*(?:[1-9]\d*)?)|(?:[1-9]\d*<*(?:[1-9]\d*)?))
    name: meta.code.note.abc
    captures:
      '1': {name: constant.language.abc}
      '2': {name: constant.character.abc}
      '3': {name: constant.numeric.abc}

  abc-rests:
    match: '([xyz])((?:[1-9]\d*/*(?:[1-9]\d*)?)|(?:[1-9]\d*>*(?:[1-9]\d*)?)|(?:[1-9]\d*<*(?:[1-9]\d*)?))?|[XZ]([1-9][0-9]*)?|y(\d*(?:\.\d+)?)'
    name: meta.code.rest.abc
    captures:
      '1': {name: constant.character.abc}
      '2': {name: constant.numeric.abc}

  note-lengths:
    match: '((?:[1-9]\d*/*(?:[1-9]\d*)?)|(?:[1-9]\d*>*(?:[1-9]\d*)?)|(?:[1-9]\d*<*(?:[1-9]\d*)?))'
    name: meta.code.note.length.abc constant.numeric.abc
    captures:
      '1': {name: constant.numeric.abc}

  decorations:
    - match: '(?<!\\)![^!%\r\n]+!'
      name: markup.other.decoration.abc
    - match: '(?<!\\)[-.~uvTHLMPSO]'
      name: markup.other.decoration.abc

  annotations:
    begin: '((?<!\\)")'
    beginCaptures:
      '1': {name: keyword.operator.abc}
    end: '((?<!\\)")'
    endCaptures:
      '1': {name: keyword.operator.abc}
    contentName: string.quoted.double.abc
    patterns:
      - include: '#escapes'

  grace-notes:
    begin: '((?<!\\){\/?).*'
    beginCaptures:
      '1': {name: keyword.operator.abc}
    end: '((?<!\\)})'
    endCaptures:
      '1': {name: keyword.operator.abc}
    contentName: meta.code.note.grace.abc
    patterns:
      - include: '#abcNote'
      - include: '#abcRest'

  tuplets:
    match: '((?<!\\)\([1-9](?::\d+(:\d+)?)?)'
    name: meta.code.tuplet.abc constant.numeric.abc

  slurs:
    name: meta.code.slur.abc
    begin: '((?<!\\)\()'
    beginCaptures:
      '1': {name: keyword.operator.abc}
    end: '((?<!\\)\))'
    endCaptures:
      '1': {name: keyword.operator.abc}
    patterns:
      - include: '#slurs'

  chords:
    name: meta.code.chord.abc
    begin: '(?<!\\)(\[)'
    beginCaptures:
      '1': {name: keyword.operator.abc}
    end: '(?<!\\)(\])'
    endCaptures:
      '1': {name: keyword.operator.abc}
    patterns:
      - include: '#abcNotes'
      - include: '#abcRests'

  # Sections
  abc-tunes:
    name: meta.struct.tune.abc
    begin: '^(X:)\s*(\d+|*)'
    beginCaptures:
      '1': {name: keyword.control.abc punctuation.definition.keyword.abc}
      '2': {name: meta.toc-list.abc }
    end: ^\r?\n\s*\r?\n
    patterns:
      - include: '#inlineFields'
      - include: '#annotations'
      - include: '#decorations'
      - include: '#barLines'
      - include: '#graceNotes'
      - include: '#slurs'
      - include: '#tuplets'
      - include: '#abcNotes'
      - include: '#comments'
      - include: '#fields'
      - include: '#directives'

  file-header:
    name: meta.struct.file.header.abc
    begin: (^%abc(?:-\d\.\d)?)
    beginCaptures:
      '1': {name: storage.modifier.version.abc meta.namespace.file.abc meta.preprocessor.abc }
    end: \r?\n\s*\r?\n
    patterns:
      - include: '#comments'
      - include: '#directives'
