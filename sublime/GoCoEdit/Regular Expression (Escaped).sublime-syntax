%YAML 1.2
---
# Based on PackageDev's Regular Expression (Escaped).JSON-tmLanguage (https://github.com/SublimeText/PackageDev/)
#
# License
# =======
#
# Copyright (c) 2014 Guillermo LÃ³pez-Anglada (Vintageous),
#                    FichteFoll <fichtefoll2@googlemail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Regular Expression (Escaped)
file_extensions:
  - ere
scope: source.escapedregexp
contexts:
  main:
    - include: classes
    - include: anchorsWithBackslash
    - include: allEscapes
    - include: anchors
    - include: quantifiers
    - include: granularQuantifier
    - include: operators
    - include: sets
    - include: groups

  allEscapes:
    # Order matters.
    - include: regexpEscapeSequences
    - include: regexpEscapedBackslash
    - include: jsonEscapeSequences

  anchors:
    - match: '[$^]'
      scope: entity.other.attribute-name.anchor.escapedregexp

  anchorsWithBackslash:
    - match: '(?:\\\\[AbBZ])'
      scope: entity.other.attribute-name.anchor.escapedregexp

  classes:
    # 'XXX: Add unicode escapes \x00 and escapes within comments.'
    - match: '\\\\[dDsSwW]'
      scope: keyword.other.character-class.escapedregexp

  granularQuantifier:
    - scope: meta.granular.quantifier.escapedregexp
      match: (\{)([0-9]+)(,)?([0-9]+)?(\})
      captures:
        1: keyword.other.punctuation.quantifier.start.escapedregexp
        2: constant.numeric.escapedregexp
        3: keyword.other.separator.escapedregexp
        4: constant.numeric.escapedregexp
        5: keyword.other.punctuation.quantifier.end.escapedregexp

  groups:
    - match: (\()
      captures:
        1: string.regexp.group.escapedregexp
      # 'XXX: Implement named groups, options and yes/no groups.'
      push:
        - meta_scope: meta.group.escapedregexp
        - match: (\))
          captures:
            0: string.regexp.group.escapedregexp
          pop: true
        - match: '(\?(?:[:=!>]|<[=!]))'
          scope: support.function.assertion.escapedregexp
        - include: main

  jsonEscapeSequences:
    - match: '\\[bfntr"/]'
      scope: entity.other.attribute-name.escape.sequence.json.escapedregexp

  operators:
    - match: '[|.]'
      scope: keyword.other.operator.escapedregexp

  quantifiers:
    - match: '(\+|\*|\?)(\?)?'
      scope: keyword.other.quantifier.escapedregexp

  regexpEscapeSequences:
    # Escape next char if the slash isn't being escaped itself.
    - match: '(?<!\\\\)\\\\(?:[]^+?*.(){}$\[])'
      scope: constant.character.escape.sequence.regexp.escapedregexp

  regexpEscapedBackslash:
    - match: \\\\
      scope: constant.character.escape.sequence.regexp.escapedregexp

  sets:
    - match: (\[)(\^)?(\])?
      captures:
        1: keyword.other.set.escapedregexp
        2: keyword.other.set.operator.negate.escapedregexp
        3: string.set.element.escapedregexp
      push:
        - meta_scope: meta.set.escapedregexp
        - match: '(\])'
          captures:
            1: keyword.other.set.escapedregexp
          pop: true
        - match: '[A-Za-z0-9](-)[A-Za-z0-9]'
          captures:
            1: keyword.operator.other.set.range.separator.escapedregexp
          scope: support.function.set.range.escapedregexp
        - include: regexpEscapeSequences
        - include: classes
        - include: jsonEscapeSequences
        - match: '.*?'
          scope: string.set.element.escapedregexp
