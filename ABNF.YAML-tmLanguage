# [PackageDev] target_format: plist, ext: tmLanguage
name: Augmented BNF
scopeName: source.abnf
fileTypes: [abnf]
uuid: d167af74-1db4-48ea-ba12-2c31a07add3a

patterns:
- name: keyword.operator.assignment.abnf
  match: (=/|::=)

- name: keyword.other.separator.abnf
  match: /

- name: comment.line.semicolon.abnf
  match: ;.*

- name: support.function.built-in.abnf
  match: (?i:WSP|LWSP|ALPHA|DIGIT|HEXDIG|DQUOTE|SP|HTAB|VCHAR|CHAR|OCTET|CTL|CR|LF|CRLF|BIT)

- name: constant.character.escape.decimal.abnf
  match: (%d[0-9]{1,2}(?:[-.]d?[0-9]{1,2})?)

- name: constant.character.escape.hexadecimal.abnf
  match: (%x[0-9a-fA-F]{1,2}(?:[-.]x?[0-9a-fA-F]{1,2})?)

- name: constant.character.escape.binary.abnf
  match: (%b[01]{1,2}(?:[-.]b?[01]{1,2})?)

- name: meta.optional.abnf
  begin: (\[)
  beginCaptures:
    '1': {name: punctuation.definition.optional.abnf}
  end: (\])
  endCaptures:
    '1': {name: punctuation.definition.optional.abnf}
  patterns:
    - include: $self

- name: meta.grouping.abnf
  begin: (\()
  beginCaptures:
    '1': {name: punctuation.definition.group.abnf}
  end: (\))
  endCaptures:
    '1': {name: punctuation.definition.group.abnf}
  patterns:
    - include: $self

- name: meta.string.abnf
  contentName: string.quoted.double.abnf
  begin: (\")
  beginCaptures:
    '1': {name: punctuation.definition.string.begin.abnf}
  end: (\")
  endCaptures:
    '1': {name: punctuation.definition.string.end.abnf}
  patterns:
    - include: '#escape'

- name: meta.string.abnf
  contentName: string.quoted.single.abnf
  begin: (\')
  beginCaptures:
    '1': {name: punctuation.definition.string.begin.abnf}
  end: (\')
  endCaptures:
    '1': {name: punctuation.definition.string.end.abnf}

- name: meta.string.abnf
  contentName: string.quoted.double.abnf
  begin: (%[is])(\")
  beginCaptures:
    '1': {name: punctuation.definition.string.case-escape.abnf}
    '2': {name: punctuation.definition.string.begin.abnf}
  end: (\")
  endCaptures:
    '1': {name: punctuation.definition.string.end.abnf}
  patterns:
    - include: '#escape'

- name: meta.string.abnf
  contentName: string.quoted.single.abnf
  begin: (%[is])(\')
  beginCaptures:
    '1': {name: punctuation.definition.string.case-escape.abnf}
    '2': {name: punctuation.definition.string.begin.abnf}
  end: (\')
  endCaptures:
    '1': {name: punctuation.definition.string.end.abnf}

- name: meta.rule.abnf
  contentName: variable.language.rule.abnf
  begin: ^\s*([[:alpha:]][-\w]*)\s*(:{,2}?=|=/?)
  beginCaptures:
    '1': {name: entity.name.class.abnf}
    '2': {name: keyword.operator.abnf}
  end: \n
  patterns:
    - include: '#escape'
    - include: '#group'
    - include: '#option'
    - include: '#rule'

- name: meta.rule.parameter.abnf
  match: \s*([[:alpha:]][-\w]*)\s*
  captures:
    '1': {name: variable.language.abnf}

- name: constant.character.escape.abnf
  match: (%d[0-9]{1,2}(?:[-.]d?[0-9]{1,2})?)

- name: constant.character.escape.abnf
  match: (%x[0-9a-fA-F]{1,2}(?:[-.]x?[0-9a-fA-F]{1,2})?)

- name: constant.character.escape.abnf
  match: (%b[01]{1,2}(?:[-.]b?[01]{1,2})?)

repository:
  escape:
    - name: constant.character.escape.abnf
      match: (%d[0-9]{1,2}(?:[-.]d?[0-9]{1,2})?)
    - name: constant.character.escape.abnf
      match: (%x[0-9a-fA-F]{1,2}(?:[-.]x?[0-9a-fA-F]{1,2})?)
    - name: constant.character.escape.abnf
      match: (%b[01]{1,2}(?:[-.]b?[01]{1,2})?)
  group:
    name: meta.grouping.abnf
    begin: (\()
    beginCaptures:
      '1': {name: keyword.operator.abnf}
    end: (\))
    endCaptures:
      '1': {name: keyword.operator.abnf}
  option:
    name: meta.optional.abnf
    begin: (\[)
    beginCaptures:
      '1': {name: keyword.operator.abnf}
    end: (\])
    endCaptures:
      '1': {name: keyword.operator.abnf}
  rule:
    name: meta.rule.parameter.abnf
    match: \s*([[:alpha:]][-\w]*)\s*
    captures:
      '1': {name: variable.language.rule.abnf}
